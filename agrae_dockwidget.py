# -*- coding: utf-8 -*-
"""
/***************************************************************************
agraeDockWidget
                                 A QGIS plugin
 Conjunto de herramientas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-12-03
        git sha              : $Format:%H$
        copyright            : (C) 2021 by  aGrae Solutions, S.L.
        email                : info@agrae.es
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
# from datetime import date

from psycopg2 import OperationalError,InterfaceError, errors, extras
from PyQt5.QtCore import QRegExp, QDate, Qt, QObject, QThread
from PyQt5.QtGui import QRegExpValidator, QIcon, QPixmap
from PyQt5.QtWidgets import *
from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal, QSettings
from qgis.core import *
from qgis.utils import iface
from .agrae_dialogs import agraeSegmentoDialog
from .utils import AgraeUtils, AgraeToolset

from .agraeTools import agraeToolset
from .resources import *




agraeSidePanel, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/agrae_dockwidget_base.ui'))
agraeConfigPanel, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/config_ui.ui'))
agraeMainPanel, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/agrae_main.ui'))
agraeParcelaDialog, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/dialogs/parcela_dialog.ui'))

agraeLoteDialog, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/dialogs/lote_dialog.ui'))
agraeLoteParcelaDialog, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/dialogs/loteparcela_dialog.ui'))
agraeExpDialog, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/dialogs/exp_dialog.ui'))
agraeCultivoDialog, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/dialogs/cultivo_dialog.ui'))

class agraeDockWidget(QtWidgets.QDockWidget, agraeSidePanel):
    closingPlugin = pyqtSignal()
    def __init__(self, parent=None):
        """Constructor."""
        super(agraeDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton.clicked.connect(self.select_input_file)

    def select_input_file(self):
        filename = QFileDialog.getOpenFileName(None,'Seleccionar archivo')
        # print(filename[0])
        self.lineEdit.setText(filename[0])
        # print(len(self.lineEdit.text()))
    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()


class agraeConfigWidget(QtWidgets.QDialog, agraeConfigPanel): 
    closingPlugin2 = pyqtSignal()
    def __init__(self, parent=None):
        """Constructor."""
        super(agraeConfigWidget, self).__init__(parent)
        self.s = QSettings('agrae','dbhost')
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)      
    
    def closeEvent(self, event):  
        self.closingPlugin2.emit()
        event.accept()

class parcelaFindDialog(QtWidgets.QDialog, agraeParcelaDialog):
    closingPlugin = pyqtSignal()

    actualizar = pyqtSignal(list)
    sqlSignal = pyqtSignal(str)
    idParcelaSignal = pyqtSignal(str)

    def __init__(self, parent=None):
        """Constructor."""
        super(parcelaFindDialog, self).__init__(parent)
        self.utils = AgraeUtils()
        self.tools = AgraeToolset()
        self.conn = self.utils.Conn()

        self.idParcela = None

        


        
        self.setupUi(self)
        self.UIcomponents()
        self.buscar()
        



    def closeEvent(self, event):

        self.closingPlugin.emit()

        event.accept()

    def UIcomponents(self):
        icons_path = self.utils.iconsPath() 
        data = self.dataAuto()
        lista = [e[0] for e in data]
        completer = QCompleter(lista)
        completer.setCaseSensitivity(False)
        self.lineEdit.setCompleter(completer)       
        self.tableWidget.horizontalHeader().setStretchLastSection(True)

        self.pushButton.setIconSize(QtCore.QSize(20, 20))
        self.pushButton.setIcon(QIcon(icons_path['load_data']))
        self.pushButton.setToolTip('Cargar Datos al Formulario')
        self.pushButton.clicked.connect(self.cargarParcela)
        
        self.pushButton_2.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_2.setIcon(QIcon(icons_path['add_layer_to_map']))
        self.pushButton_2.clicked.connect(self.agregarParcelaMapa)
        self.pushButton_2.setToolTip('Añadir Parcela al Mapa')
        
        self.pushButton_3.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_3.setIcon(QIcon(icons_path['pen-to-square']))
        self.pushButton_3.setToolTip('Renombrar Parcelas')
        self.pushButton_3.clicked.connect(self.renameParcelas)

        self.pushButton_4.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_4.setIcon(QIcon(icons_path['add_group_layers']))
        self.pushButton_4.setToolTip('Añadir grupo de parcelas')
        self.pushButton_4.clicked.connect(self.agregarGrupoParcelasMapa)

        self.lineEdit.setClearButtonEnabled(True)
        line_buscar_action = self.lineEdit.addAction(
            QIcon(icons_path['search_icon_path']), self.lineEdit.TrailingPosition)
        line_buscar_action.triggered.connect(self.buscar)

    def data(self, filtro=None):
        if filtro == None:
            cursor = self.conn.cursor()
            sql = '''select p.idparcela, p.nombre parcela ,(case when lp2.parcela >= 1 then 'Si' else 'No' end) relacion ,
            (case when l.nombre is null then '' else l.nombre end) lote ,prov.nombre provincia, mcpo.nombre municipio,  cu.nombre cultivo , 
            ca.fechasiembra, ca.fechacosecha , p.idsigpac
            from parcela p
            left join loteparcela lp on lp.idparcela = p.idparcela 
            left join lotecampania lc on lc.idlotecampania =lp.idlotecampania 
            left join lote l on l.idlote = lc.idlote 
            left join (select lp.idparcela, count(*) as parcela from loteparcela as lp group by lp.idparcela) as lp2  on lp2.idparcela = p.idparcela
            left join campania ca on ca.idcampania = lc.idcampania 
            left join cultivo cu on cu.idcultivo = ca.idcultivo 
            join datos.provincia prov on prov.idprovincia = p.provincia 
            join datos.municipio mcpo on mcpo.cod_municipio = p.municipio and mcpo.idprovincia = prov.idprovincia
            order by l.nombre   '''
            cursor.execute(sql)
            data = cursor.fetchall()
        else:
            cursor = self.conn.cursor()
            sql = f""" select p.idparcela, p.nombre parcela ,(case when lp2.parcela >= 1 then 'Si' else 'No' end) relacion ,
            (case when l.nombre is null then '' else l.nombre end) lote ,prov.nombre provincia, mcpo.nombre municipio,  cu.nombre cultivo , 
            ca.fechasiembra, ca.fechacosecha , p.idsigpac
            from parcela p
            left join loteparcela lp on lp.idparcela = p.idparcela 
            left join lotecampania lc on lc.idlotecampania =lp.idlotecampania 
            left join lote l on l.idlote = lc.idlote 
            left join (select lp.idparcela, count(*) as parcela from loteparcela as lp group by lp.idparcela) as lp2  on lp2.idparcela = p.idparcela
            left join campania ca on ca.idcampania = lc.idcampania 
            left join cultivo cu on cu.idcultivo = ca.idcultivo 
            join datos.provincia prov on prov.idprovincia = p.provincia 
            join datos.municipio mcpo on mcpo.cod_municipio = p.municipio and mcpo.idprovincia = prov.idprovincia   
            where p.nombre ilike '%{filtro}%' or l.nombre ilike '%{filtro}%' or prov.nombre ilike '%{filtro}%' or mcpo.nombre ilike '%{filtro}%' or p.idsigpac ilike '%{filtro}%'
            order by l.nombre """          
            # or p.agregado ilike '%{filtro}%' or p.zona ilike '%{filtro}%' or p.poligono ilike '%{filtro}%' or p.parcela ilike '%{filtro}%' or p.recinto ilike '%{filtro}%' order by p.idparcela """
            cursor.execute(sql)
            data = cursor.fetchall()
        if len(data) >= 1:
            return data
        elif len(data) == 0:
            data = [0, 0]
            return data

    def dataAuto(self):
        cursor = self.conn.cursor()
        sql = """select distinct unnest(array[p.nombre, prov.nombre, mcpo.nombre])
        from parcela p 
        left join datos.provincia prov on p.provincia = prov.idprovincia 
        join datos.municipio mcpo on mcpo.cod_municipio = p.municipio and mcpo.idprovincia = prov.idprovincia  """     
        cursor.execute(sql)
        data = cursor.fetchall()
        return data
    def populate(self,data):
        try:
            a = len(data)
            b = len(data[0])
            i = 1
            j = 1
            self.tableWidget.setRowCount(a)
            self.tableWidget.setColumnCount(b)
            for j in range(a):
                for i in range(b):
                    item = QTableWidgetItem(str(data[j][i]).upper())
                    self.tableWidget.setItem(j, i, item)                 
        except:
            QMessageBox.about(self, "Error:", "No Existen Registros")
            # print('error')

    def loadData(self,param=None):    
        if param == None:  
            data = self.data()
            self.populate(data)
        else:
            data = self.data(param)
            self.populate(data)
        pass
    def buscar(self):
        filtro = self.lineEdit.text()
        self.loadData(filtro)
        pass

    def cargarParcela(self):
        # value = self.tableWidget.item(0, 1).text()
        # print(str(value))
        try:
            row = self.tableWidget.currentRow()
            # column = self.tableWidget.currentColumn()
            param = self.tableWidget.item(row, 0).text()
            self.idParcela = param
            sqlQuery = f"""select * from parcela where idparcela = {param} """
            conn = self.conn
            cursor = conn.cursor()
            cursor.execute(sqlQuery)
            data = cursor.fetchone()
            dataLista = list(data)
            self.actualizar.emit(dataLista)
            self.idParcelaSignal.emit(param)
            self.sqlSignal.emit(sqlQuery)
            self.close()
          
        except Exception as ex:
            print(ex)

            QMessageBox.about(self,'aGrae GIS', 'Debe Seleccionar una parcela para agregar') 
        pass
    

    def agregarParcelaMapa(self):
        row = self.tableWidget.currentRow()
        self.idParcela = self.tableWidget.item(row,0).text()
        idsigpac = self.tableWidget.item(row, 9).text()
        self.tools.cargarParcela(self, idsigpac)

    def agregarGrupoParcelasMapa(self): 
        # print('ALGO')
        self.tools.cargarGrupoParcelas(self)

    def renameParcelas(self): 
        self.tools.renameParcela(self)

class loteFindDialog(QtWidgets.QDialog, agraeLoteDialog):
    closingPlugin = pyqtSignal()
    actualizar = pyqtSignal(list)
    
    def __init__(self, parent=None):

        """Constructor."""
        super(loteFindDialog, self).__init__(parent)      
        self.utils = AgraeUtils()
        self.conn = self.utils.Conn()
        
        self.setupUi(self)
        self.UIcomponents()
        

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def UIcomponents(self):
        icons_path = self.utils.iconsPath()

        self.lineEdit.setClearButtonEnabled(True)
        line_buscar_action = self.lineEdit.addAction(
            QIcon(icons_path['search_icon_path']), self.lineEdit.TrailingPosition)
        line_buscar_action.triggered.connect(self.buscar)

        # self.lineEdit_2.textChanged.connect(self.setButtonEnabled)
        
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        # self.tableWidget.setColumnHidden(0,True)
        
        self.btn_cargar_lote.setIconSize(QtCore.QSize(20, 20))
        self.btn_cargar_lote.setIcon(QIcon(icons_path['load_data']))        
        self.btn_cargar_lote.clicked.connect(self.cargarLote)
        
        self.pushButton_2.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_2.setIcon(QIcon(icons_path['link']))
        self.pushButton_2.clicked.connect(self.crearRelacionLoteParcela)
        

        self.pushButton_3.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_3.setIcon(QIcon(icons_path['link-slash']))
        self.pushButton_3.clicked.connect(self.dropRelation)
        

        
        self.btn_reload.setIconSize(QtCore.QSize(20, 20))
        self.btn_reload.setIcon(QIcon(icons_path['reload_data']))
        self.btn_reload.clicked.connect(self.lotesReload)


        data = self.data()
        try:
            lista = [e[1] for e in data]
        except:
            lista = []
        completer = QCompleter(lista)
        completer.setCaseSensitivity(False)
        self.lineEdit.setCompleter(completer)

    def data(self, filtro=None):
        if filtro == None:
            cursor = self.conn.cursor()
            sql = """select lc.idlotecampania , l.nombre lote, (case when sq1.parcelas >= 1 then coalesce(sq1.parcelas,0)::varchar(10) else 'No' end) parcelas, 
            ca.fechasiembra, ca.fechacosecha, cu.nombre cultivo
            from lote l
            left join lotecampania lc on lc.idlote = l.idlote 
            left join 
                (select lc2.idlotecampania, count(*) parcelas from loteparcela lc2 group by idlotecampania ) as sq1 
                on sq1.idlotecampania = lc.idlotecampania
            left join campania ca on ca.idcampania = lc.idcampania 
            left join cultivo cu on cu.idcultivo = ca.idcultivo 
            order by ca.fechasiembra asc"""
            cursor.execute(sql)
            data = cursor.fetchall()
            self.btn_reload.setEnabled(False)
        else:
            cursor = self.conn.cursor()
            sql = f"""select lc.idlotecampania , l.nombre lote, (case when sq1.parcelas >= 1 then coalesce(sq1.parcelas,0)::varchar(10) else 'No' end) parcelas, 
            ca.fechasiembra, ca.fechacosecha, cu.nombre cultivo
            from lote l
            left join lotecampania lc on lc.idlote = l.idlote 
            left join 
                (select lc2.idlotecampania, count(*) parcelas from loteparcela lc2 group by idlotecampania ) as sq1 
                on sq1.idlotecampania = lc.idlotecampania
            left join campania ca on ca.idcampania = lc.idcampania 
            left join cultivo cu on cu.idcultivo = ca.idcultivo 
            where l.nombre ilike '%{filtro}%'
            or cu.nombre ilike '%{filtro}%' 
            order by ca.fechasiembra asc """
            self.btn_reload.setEnabled(True)
            cursor.execute(sql)
            data = cursor.fetchall()
        if len(data) >= 1:
            return data
        elif len(data) == 0:
            data = [0, 0]
            return data

    def populate(self,data):
        try:
            a = len(data)
            b = len(data[0])
            i = 1
            j = 1
            self.tableWidget.setRowCount(a)
            self.tableWidget.setColumnCount(b)
            for j in range(a):
                for i in range(b):
                    item = QTableWidgetItem(str(data[j][i]))
                    self.tableWidget.setItem(j, i, item)
        except:
            QMessageBox.about(self, "Error:", "No Existen Registros")
            print('error')


    def loadData(self,param=None):
        

        if param == None:  

            data = self.data()

            # print(data[0][1])
            self.populate(data)

        else:

            data = self.data(param)

            # print(data[0][1])
            self.populate(data)
        pass
    def lotesReload(self): 
        self.buscar(True)

    def buscar(self, reload=False):

        filtro = self.lineEdit.text()
        if reload != False:
            filtro = None

        self.loadData(filtro)
        
        pass

    def cargarLote(self):

        try:
            try: 
                row = self.tableWidget.currentRow()
                param = self.tableWidget.item(row, 0).text()
                sqlQuery = f""" select
                l.idlote, ca.idexplotacion, ca.idcultivo, l.nombre, ca.fechasiembra, ca.fechacosecha,
                --fondo
                ca.fechafertilizacionfondo, ca.fertilizantefondoformula, ca.fertilizantefondoprecio, ca.fertilizantefondocalculado,
                ca.fertilizantefondoajustado, ca.fertilizantefondoaplicado,
                -- cob1
                ca.fechafertilizacioncbo1, ca.fertilizantecob1formula, ca.fertilizantecob1precio, ca.fertilizantecob1calculado,
                ca.fertilizantecob1ajustado, ca.fertilizantecob1aplicado,
                -- cob2
                ca.fechafertilizacioncbo2, ca.fertilizantecob2formula, ca.fertilizantecob2precio, ca.fertilizantecob2calculado,
                ca.fertilizantecob2ajustado, ca.fertilizantecob2aplicado,
                -- cob3
                ca.fechafertilizacioncbo3, ca.fertilizantecob3formula, ca.fertilizantecob3precio, ca.fertilizantecob3calculado,
                ca.fertilizantecob3ajustado, ca.fertilizantecob3aplicado
                from lote l
                left join lotecampania lc on lc.idlote = l.idlote
                left join campania ca on ca.idcampania = lc.idcampania   
                where lc.idlotecampania = {param} """
                conn = self.conn
                cursor = conn.cursor()
                cursor.execute(sqlQuery)
                data = cursor.fetchone()
                dataLista = list(data)
                self.actualizar.emit(dataLista)
                self.close()

            except:                
                data = self.tableWidget.item(row, 1).text()
                dataLista = [data]
                self.actualizar.emit(dataLista)
                QMessageBox.about(self, 'aGrae GIS', 'El Lote que selecciono no tiene una campaña\nasociada, porfavor cree una nueva campaña para este lote.')
                self.close()
        except Exception as ex:
            print(ex)            
            QMessageBox.about(self, 'Error','Ocurrio un Error')
            pass      

    def setButtonEnabled(self):
        if self.lineEdit_2.text() != '':
            self.pushButton_2.setEnabled(True)
            self.lineEdit_2.setStyleSheet(
                'background-color: rgb(255, 255, 255);')
            
        else: 
            self.pushButton_2.setEnabled(False)
            self.lineEdit_2.setStyleSheet(
                'background-color: rgb(255, 94, 94);')
                  
    def crearRelacionLoteParcela(self):
        lyr = iface.activeLayer() 
        features = lyr.selectedFeatures()
                
        row = self.tableWidget.currentRow()
        idLote = self.tableWidget.item(row,0).text()
        error = [] 
                   
        try:
            for f in features: 
                cursor = self.conn.cursor()
                idParcela = f[1]

                try:
                    if idLote == None:
                        QMessageBox.about(self, 'aGrae GIS', f'El Lote no tiene una campaña asociada') 
                    else: 
                        sql = f''' insert into loteparcela(idparcela,idlotecampania) 
                                values({idParcela},{idLote}) '''                    
                        cursor.execute(sql)
                        # print(f'Se creo la Relacion {idParcela,idLote}')
                        self.conn.commit()
                        # self.pushButton_2.setEnabled(False)
                   



                except errors.lookup('23505'):
                    error.append(idParcela)
                    # print(f'La parcela {f[1]} ya existe pertenece a un lote.')
                    QMessageBox.about(self, 'aGrae GIS',
                                      f'La parcela {f[1]} ya existe pertenece a un lote.')
                    self.conn.rollback()
            
            if len(error) == 0:
                QMessageBox.about(self, 'aGrae GIS', f'Se creo la Relacion sin errores ') 
            elif len(error) >0 and len(error) <len(features): 
                QMessageBox.about(self, 'aGrae GIS', f' Las siguientes parcelas no se pudieron relacionar \n ({error})')
            elif len(error) == len(features): 
                QMessageBox.about(self, 'aGrae GIS', f'No se pudieron relacionar las Parcelas seleccionadas.')

                

        except Exception as ex: 
            print(ex)
            QMessageBox.about(self, 'aGrae GIS', f'Ocurrio un Error. ')
            self.conn.rollback()

    def dropRelation(self): 
        lyr = iface.activeLayer()
        features = lyr.selectedFeatures()
        row = self.tableWidget.currentRow()
        idLote = self.tableWidget.item(row, 0).text()
        cursor = self.conn.cursor()
        
        try:
            for f in features:
                idParcela = f[1]
                confirm = QMessageBox.question(
                    self, 'aGrae GIS', f"Seguro quiere quitar la parcela {f[11]} del lote:\n{self.tableWidget.item(row, 1).text()}-{self.tableWidget.item(row,5).text()}\nCampaña: {self.tableWidget.item(row, 3).text()}", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
                if confirm == QMessageBox.Yes:
                    sqlCheck = f'select * from loteparcela where idparcela = {idParcela} and idlotecampania = {idLote}'
                    cursor.execute(sqlCheck)
                    data = cursor.fetchall()
                    if len(data) < 1:
                        # print('No existe la relacion entre la parcela y el lote seleccionado')
                        self.conn.rollback()
                    else:
                        _confirm = QMessageBox.question(
                            self, 'aGrae GIS', f"Datos Correctos. Desea Continuar?", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
                        if _confirm == QMessageBox.Yes: 
                            sql = f'delete from loteparcela where idparcela = {idParcela} and idlotecampania = {idLote}'
                            cursor.execute(sql)
                            self.conn.commit()
                        else: 
                            self.conn.rollback()
                            

        
        except Exception as ex:
            print(ex) 
            pass


class expFindDialog(QtWidgets.QDialog, agraeExpDialog):
    closingPlugin = pyqtSignal()
    getIdExp = pyqtSignal(int)
    
    def __init__(self, parent=None):
        """Constructor."""
        super(expFindDialog, self).__init__(parent)
        self.utils = AgraeUtils()
        self.conn = self.utils.Conn()
        
        
        # print(lista)
        
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.UIcomponents()

    def selectIdExp(self): 
        row = self.tableWidget.currentRow()
        idExp = int(self.tableWidget.item(row,0).text())
        self.getIdExp.emit(idExp)
        self.close()

    def UIcomponents(self):
        
        data = self.dataAuto()
        lista = [e[0] for e in data]
        completer = QCompleter(lista)
        completer.setCaseSensitivity(False)

        icons_path = self.utils.iconsPath() 
        self.lineEdit.setClearButtonEnabled(True)
        line_buscar_action = self.lineEdit.addAction(
            QIcon(icons_path['search_icon_path']), self.lineEdit.TrailingPosition)
        line_buscar_action.triggered.connect(self.buscar)
        # self.btn_buscar.clicked.connect(self.buscar)
        self.pushButton.clicked.connect(self.selectIdExp)
        self.pushButton.setIconSize(QtCore.QSize(20, 20))
        self.pushButton.setIcon(QIcon(icons_path['share']))

        self.pushButton_2.clicked.connect(self.crear)

        self.lineEdit.setCompleter(completer)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)


    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def data(self, filtro=None):
        if filtro == None:
            cursor = self.conn.cursor()
            sql = "select idexplotacion,nombre, direccion from explotacion order by idexplotacion"
            cursor.execute(sql)
            data = cursor.fetchall()
        else:
            cursor = self.conn.cursor()
            sql = f"select idexplotacion,nombre, direccion from explotacion where nombre ilike '%{filtro}%' or direccion ilike '%{filtro}%' order by idexplotacion "
            cursor.execute(sql)
            data = cursor.fetchall()
        if len(data) >= 1:
            return data
        elif len(data) == 0:
            data = [0, 0]
            return data
    def dataAuto(self):
        cursor = self.conn.cursor()
        sql = "select nombre from explotacion union select direccion from explotacion"
        cursor.execute(sql)
        data = cursor.fetchall()
        return data

    def populate(self, data):
        try:
            a = len(data)
            b = len(data[0])
            i = 1
            j = 1
            self.tableWidget.setRowCount(a)
            self.tableWidget.setColumnCount(b)
            for j in range(a):
                for i in range(b):
                    item = QTableWidgetItem(str(data[j][i]))
                    self.tableWidget.setItem(j, i, item)
        except:
            QMessageBox.about(self, "Error:", "No Existen Registros")
            # print('error')

    def loadData(self, param=None):
        if param == None:
            data = self.data()
            self.populate(data)
        else:
            data = self.data(param)
            self.populate(data)
        pass

    def buscar(self):
        filtro = self.lineEdit.text()
        self.loadData(filtro)
        pass
    
    def crear(self): 
        cursor = self.conn.cursor() 
        nombre = self.lineEdit_2.text()
        direccion = self.lineEdit_3.text()
        if nombre != '' and direccion != '': 
            try:
                sql = f''' insert into explotacion(nombre,direccion)
                values('{nombre}','{direccion}') '''
                cursor.execute(sql)
                self.conn.commit()
                QMessageBox.about(self, "aGrae GIS:", "Se creo correctamente")
            except Exception as ex: 
                print(ex)
                QMessageBox.about(self, "Error:", "Error revisa la consola")
                self.conn.rollback()
        else: 
            QMessageBox.about(self, "Error:", "Debes rellenar todos los campos")


class cultivoFindDialog(QtWidgets.QDialog, agraeCultivoDialog):

    closingPlugin = pyqtSignal()
    getIdCultivo = pyqtSignal(int)

    def __init__(self, parent=None):
        """Constructor."""
        super(cultivoFindDialog, self).__init__(parent)
        self.utils = AgraeUtils()
        self.conn = self.utils.Conn()
        self.setupUi(self)
        self.UIcomponents()
        


    def UIcomponents(self):
        icons_path = self.utils.iconsPath()
        data = self.dataAuto()
        lista = [e[0] for e in data]
        # print(lista)
        completer = QCompleter(lista)
        completer.setCaseSensitivity(False)

        self.lineEdit.setClearButtonEnabled(True)
        line_buscar_action = self.lineEdit.addAction(
            QIcon(icons_path['search_icon_path']), self.lineEdit.TrailingPosition)
        line_buscar_action.triggered.connect(self.buscar)

        # self.lineEdit.returnPressed.connect(self.buscar)

        
        # self.btn_buscar.clicked.connect(self.buscar)
        self.lineEdit.setCompleter(completer)

    

        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.pushButton.clicked.connect(self.selectIdCultivo)
        self.pushButton.setIconSize(QtCore.QSize(20, 20))
        self.pushButton.setIcon(QIcon(icons_path['share']))

    
    def selectIdCultivo(self): 
        row = self.tableWidget.currentRow()
        idCultivo = int(self.tableWidget.item(row,0).text())
        self.getIdCultivo.emit(idCultivo)
        self.close()
    
    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def data(self, filtro=None):
        if filtro == None:
            cursor = self.conn.cursor()
            sql = "select idcultivo,nombre from cultivo order by idcultivo"
            cursor.execute(sql)
            data = cursor.fetchall()
        else:
            cursor = self.conn.cursor()
            sql = f"select idcultivo,nombre from cultivo where nombre ilike '%{filtro}%' order by idcultivo"
            cursor.execute(sql)
            data = cursor.fetchall()
        if len(data) >= 1:
            return data
        elif len(data) == 0:
            data = [0, 0]
            return data

    def dataAuto(self):
        cursor = self.conn.cursor()
        sql = "select nombre from cultivo"
        cursor.execute(sql)
        data = cursor.fetchall()
        return data


    def populate(self, data):
        try:
            a = len(data)
            b = len(data[0])
            i = 1
            j = 1
            self.tableWidget.setRowCount(a)
            self.tableWidget.setColumnCount(b)
            for j in range(a):
                for i in range(b):
                    item = QTableWidgetItem(str(data[j][i]))
                    self.tableWidget.setItem(j, i, item)
        except:
            QMessageBox.about(self, "Error:", "No Existen Registros")
            # print('error')

    def loadData(self, param=None):
        if param == None:
            data = self.data()
            self.populate(data)
        else:
            data = self.data(param)
            self.populate(data)
        pass

    def buscar(self):
        filtro = self.lineEdit.text()
        if filtro != '':
            self.loadData(filtro)
        pass
    
    
class ReadOnlyDelegate(QtWidgets.QStyledItemDelegate):
    def createEditor(self, parent, option, index):
        return


class agraeMainWidget(QtWidgets.QMainWindow, agraeMainPanel):

    closingPlugin = pyqtSignal()
    def __init__(self, parent=None):
        """Constructor."""      
        super(agraeMainWidget, self).__init__(parent)  

        self.utils = AgraeUtils()
        self.tools = AgraeToolset()
        self.conn = self.utils.Conn()
        self.style = self.utils.styleSheet()
        self.idlote = None
        self.idParcela = None
        self.sqlParcela = ''
        self.sqlSegmento = ''

        self.sinceDateStatus = False

        self.dns = self.utils.dns
        

        
              
        self.setupUi(self)
        self.UIcomponents()
        self.populateComboProv()
        self.populateComboMcpo(self.prov_combo.currentData())
        self.setLineFormatValidator()
        self.setStyleLines()

    def UIcomponents(self):
        icons_path = self.utils.iconsPath()

        dataParcela = self.dataAutoParcela()
        listaParcela = [e[0] for e in dataParcela]
        # print(listaParcela)
        completerParcela = QCompleter(listaParcela)
        completerParcela.setCaseSensitivity(False)

        dataSegmento = self.dataAutoSegmento()
        listaSegmento = [e[0] for e in dataSegmento]
        completerSegmento = QCompleter(listaSegmento)
        completerSegmento.setCaseSensitivity(False)

        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        # columna geometria lote parcela
        self.tableWidget.setColumnHidden(6, True) # columna geometria loteparcela
        self.tableWidget.setColumnHidden(0, True)  # columna id lote parcela

        self.tableWidget_2.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_2.setColumnHidden(0, True)
        self.tableWidget_2.setColumnHidden(1, True)

        delegate = ReadOnlyDelegate(self.tableWidget_2)
        self.tableWidget_2.setItemDelegateForColumn(0, delegate)
        self.tableWidget_2.setItemDelegateForColumn(1, delegate)
        self.tableWidget_2.setItemDelegateForColumn(2, delegate)
        self.tableWidget_2.setItemDelegateForColumn(3, delegate)
        self.tableWidget_2.setItemDelegateForColumn(4, delegate)
        self.tableWidget_2.setItemDelegateForColumn(5, delegate)
        self.tableWidget_2.setItemDelegateForColumn(6, delegate)
        # self.tableWidget_2.setItemDelegateForColumn(7, delegate)

        self.line_buscar.setClearButtonEnabled(True)
        line_par_action = self.ln_par_nombre.addAction(
            QIcon(icons_path['search_icon_path']), self.ln_par_nombre.TrailingPosition)
        line_par_action.triggered.connect(self.parcelaDialog)
        line_lote_action = self.line_lote_nombre.addAction(
            QIcon(icons_path['search_icon_path']), self.line_lote_nombre.TrailingPosition)
        line_lote_action.triggered.connect(self.loteDialog)
        line_loteidexp_action = self.line_lote_idexp.addAction(
            QIcon(icons_path['search_icon_path']), self.line_lote_idexp.TrailingPosition)
        line_loteidexp_action.triggered.connect(self.expDialog)
        line_loteidcultivo_action = self.line_lote_idcultivo.addAction(
            QIcon(icons_path['search_icon_path']), self.line_lote_idcultivo.TrailingPosition)
        line_loteidcultivo_action.triggered.connect(self.cultivoDialog)
        line_buscar_action = self.line_buscar.addAction(
                    QIcon(icons_path['search_icon_path']), self.line_buscar.TrailingPosition)
        line_buscar_action.triggered.connect(self.buscarLotes)

        self.btn_add_layer.setIcon(QIcon(icons_path['add_layer_to_map']))
        self.btn_add_layer.setIconSize(QtCore.QSize(20, 20))
        self.btn_add_segmento.setIcon(QIcon(icons_path['add_layer_to_map']))
        self.btn_add_segmento.setIconSize(QtCore.QSize(20, 20))
        self.btn_add_segmento.clicked.connect(self.cargarSegmentosLote)

        self.btn_par_update.clicked.connect(self.actualizarParcela)
        self.btn_lote_update.clicked.connect(self.actualizarLote)
        self.prov_combo.currentTextChanged.connect(self.indexProvUpdate)
        self.setStyleSheet(self.style)
        self.line_buscar.setCompleter(completerParcela)
        self.line_find_segmento.setCompleter(completerSegmento)
        self.btn_crear_lote.setIcon(QIcon(icons_path['save']))
        self.btn_crear_lote.setIconSize(QtCore.QSize(20, 20))
        self.btn_crear_lote.clicked.connect(self.crearLote)
        self.btn_crear_campania.setIcon(QIcon(icons_path['save']))
        self.btn_crear_campania.setIconSize(QtCore.QSize(20, 20))
        self.btn_crear_campania.clicked.connect(self.crearCampania)
        self.ln_par_nombre.textChanged.connect(self.validarNombre)
        self.line_lote_nombre.textChanged.connect(self.validarNombre)
        self.line_lote_idexp.textChanged.connect(self.validarNombre)
        self.line_lote_idcultivo.textChanged.connect(self.validarNombre)
        self.pushButton_3.clicked.connect(self.crearAmbientes)
        self.pushButton_4.clicked.connect(self.segmentoDialog)
        self.pushButton.clicked.connect(self.cargarParcela)
        self.btn_find_segmento.clicked.connect(self.buscarSegmento)

        self.btn_add_lotes.clicked.connect(self.addLotesMap)
        self.btn_add_parcelas.clicked.connect(self.addParcelasMap)
        self.btn_add_segmentos.clicked.connect(self.addSegmentosMap)
        self.btn_cod_segmento.clicked.connect(self.codificarSegmento)
    
        self.btn_add_layer.clicked.connect(self.cargarLote)

        self.btn_reload.setIcon(QIcon(icons_path['reload_data']))
        self.btn_reload.setIconSize(QtCore.QSize(20, 20))
        self.btn_reload.setToolTip('Buscar todos los lotes')
        self.btn_reload.clicked.connect(self.reloadLotes)




    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def dataAutoParcela(self): 
        cursor = self.conn.cursor()
        sql = '''select distinct unnest(array[l.nombre, p.nombre, c.nombre]) from lote l
        left join lotecampania lc on lc.idlote = l.idlote
        left join campania ca on ca.idcampania = lc.idcampania 
        left join loteparcela lp on lc.idlotecampania = lp.idlotecampania 
        left join parcela p on lp.idparcela = p.idparcela
        left join cultivo c on c.idcultivo = ca.idcultivo'''
        cursor.execute(sql)
        data = cursor.fetchall()
        return data
    def dataAutoSegmento(self): 
        cursor = self.conn.cursor()
        sql = '''select distinct unnest(array[s.cod_control, l.nombre, a.cod_analisis]) lista from segmento s
            join lote l on s.idlote = l.idlote 
            left join segmentoanalisis sa on s.idsegmento = sa.idsegmento
            left join analisis a on a.idanalisis = sa.idanalisis
            order by lista '''
        # cursor.execute(sql)
        # data = cursor.fetchall()
        data = []
        return data
    def actualizarParcela(self):
        idParcela = self.lbl_id_parcela.text()
        name = self.ln_par_nombre.text()
        prov = int(self.prov_combo.currentData())
        mcpo = int(self.mcpo_combo.currentData())
        aggregate = self.ln_par_agg.text()
        zone = self.ln_par_zona.text()
        poly = self.ln_par_poly.text()
        allotment = self.ln_par_parcela.text()
        inclosure = self.ln_par_recinto.text()
        confirm = QMessageBox.question(self, 'aGrae GIS', f"Seguro quiere Actualizar la parcela:\n--- ID: {idParcela}\n--- Nombre: {name.upper()}?", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if confirm == QMessageBox.Yes:
            with self.conn as conn:
                try:
                    # sql = f'''update parcela set nombre = '{name}', provincia = {prov}, municipio = {mcpo}, agregado = '{aggregate}', zona = '{zone}', poligono = '{poly}', parcela = '{allotment}', recinto = '{inclosure}' where idparcela = '{idParcela}' '''               
                    sql = f'''update parcela set nombre = '{name}', provincia = {prov}, municipio = {mcpo}  where idparcela = '{idParcela}' '''  # ! SENTENCIA TEMPORAL
                    cursor = conn.cursor()
                    cursor.execute(sql)
                    conn.commit()
                    QMessageBox.about(self, f"aGrae GIS:",f"Parcela *-- {name} --* Se modifico Correctamente.")
                    self.btn_par_update.setEnabled(False)
                except Exception as ex:
                    QMessageBox.about(self, f"Error:",f"{ex} \nHa ocurrido un Error por favor, verifique los datos o contacese con soporte tecnico")
        else:
            pass
    def actualizarLote(self):
        idlote = self.idlote
        nombre = self.line_lote_nombre.text()
        idexp = self.line_lote_idexp.text()
        idcult = self.line_lote_idcultivo.text()
        dateSiembra = self.lote_dateSiembra.date().toString('yyyy.MM.dd')
        dateCosecha = self.lote_dateCosecha.date().toString('yyyy.MM.dd')
        dateFondo = self.date_fondo.date().toString('yyyy.MM.dd')
        fondoFormula = self.line_fondo_formula.text()
        fondoPrecio = float(self.line_fondo_precio.text())
        fondoCalculado = float(self.line_fondo_calculado.text())
        fondoAjustado = float(self.line_fondo_ajustado.text())
        fondoAplicado = float(self.line_fondo_aplicado.text())
        dateCob1 = self.date_cob.date().toString('yyyy.MM.dd')
        cob1Formula = self.line_cob_formula.text()
        cob1Precio = float(self.line_cob_precio.text())
        cob1Calculado = float(self.line_cob_calculado.text())
        cob1Ajustado = float(self.line_cob_ajustado.text())
        cob1Aplicado = float(self.line_cob_aplicado.text())
        dateCob2 = self.date_cob_2.date().toString('yyyy.MM.dd')
        cob2Formula = self.line_cob_formula_2.text()
        cob2Precio = float(self.line_cob_precio_2.text())
        cob2Calculado = float(self.line_cob_calculado_2.text())
        cob2Ajustado = float(self.line_cob_ajustado_2.text())
        cob2Aplicado = float(self.line_cob_aplicado_2.text())
        dateCob3 = self.date_cob_3.date().toString('yyyy.MM.dd')
        cob3Formula = self.line_cob_formula_3.text()
        cob3Precio = float(self.line_cob_precio_3.text())
        cob3Calculado = float(self.line_cob_calculado_3.text())
        cob3Ajustado = float(self.line_cob_ajustado_3.text())
        cob3Aplicado = float(self.line_cob_aplicado_3.text())
        confirm = QMessageBox.question(self, 'aGrae GIS', f"Seguro quiere Actualizar el Lote:\n--- ID: {idlote}\n--- Nombre: {nombre.upper()}?", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if confirm == QMessageBox.Yes:
            try:             
                sql = f'''update lote set  idexplotacion = '{idexp}', idcultivo = '{idcult}', nombre = '{nombre}',fechasiembra = '{dateSiembra}',fechacosecha = '{dateCosecha}',fechafertilizacionfondo = '{dateFondo}',    fertilizantefondoformula = '{fondoFormula}',fertilizantefondoprecio = {fondoPrecio}, fertilizantefondocalculado = {fondoCalculado},fertilizantefondoajustado = {fondoAjustado},  fertilizantefondoaplicado = {fondoAplicado},fechafertilizacioncbo1 = '{dateCob1}', fertilizantecob1formula ='{cob1Formula}',fertilizantecob1precio = {cob1Precio}, fertilizantecob1calculado = {cob1Calculado},fertilizantecob1ajustado = {cob1Ajustado}, fertilizantecob1aplicado = {cob1Aplicado},fechafertilizacioncbo2 = '{dateCob2}', fertilizantecob2formula = '{cob2Formula}', fertilizantecob2precio = {cob2Precio},  fertilizantecob2calculado = {cob2Calculado}, fertilizantecob2ajustado = {cob2Ajustado}, fertilizantecob2aplicado ={cob2Aplicado},fechafertilizacioncbo3 = '{dateCob3}', fertilizantecob3formula = '{cob3Formula}',fertilizantecob3precio = {cob3Precio}, fertilizantecob3calculado = {cob3Calculado},fertilizantecob3ajustado = {cob3Ajustado}, fertilizantecob3aplicado = {cob3Aplicado} where idlote = {idlote} '''
                # print(sql)      
                conn = self.conn
                cursor = conn.cursor()
                cursor.execute(sql)
                conn.commit()
                QMessageBox.about(self, f"aGrae GIS:",f"Lote *-- {nombre.upper()} --* Se modifico Correctamente.")
            except Exception as e: 
                cursor.rollback()
                QMessageBox.about(self,'aGrae GIS:',f'Ocurrio un Error. \n {e}')

        else:
            pass  
    def crearParcela(self):
        self.tools.crearParcela(self)
    def crearCampania(self):
        try: 
            self.tools.crearCampania(self)
            self.btn_crear_campania.setEnabled(False)
            self.btn_crear_lote.setEnabled(True)
            self.line_lote_nombre.setReadOnly(False)
            self.line_lote_nombre.setText('')

        except Exception as ex: 
            print(ex)
            pass           
    
    def crearLote(self):
        try: 
            self.tools.crearLote(self)
            self.btn_crear_campania.setEnabled(True)
            self.btn_crear_lote.setEnabled(False)
            self.line_lote_nombre.setReadOnly(True)

        except Exception as ex:
            print(ex)
            pass
        
    def populateParcela(self,data):
        style = "font-weight: bold ; color : red"
        dataStr = [str(e) for e in data]
        self.lbl_id_parcela.setText(dataStr[12])
        self.ln_par_nombre.setText(dataStr[2])
        # self.ln_par_provincia.setText(dataStr[3])            
        # if dataStr[11] != None:
        idxProv = self.prov_combo.findData(dataStr[3])
        self.prov_combo.setCurrentIndex(idxProv)           
        idxMcpo = self.mcpo_combo.findData(dataStr[4])
        self.mcpo_combo.setCurrentIndex(idxMcpo)
        # self.ln_par_mcpo.setText(dataStr[3])
        self.ln_par_agg.setText(dataStr[5])
        self.ln_par_zona.setText(dataStr[6])
        self.ln_par_poly.setText(dataStr[7])
        self.ln_par_parcela.setText(dataStr[8])
        self.ln_par_recinto.setText(dataStr[9])
        self.btn_par_create.setEnabled(False)
        self.btn_par_update.setEnabled(True)
        self.pushButton.setEnabled(True)

    def populateLote(self, data):
        # print(data)
        self.resetStyleLabels()
        data2 = []
        style = "font-weight: bold ; color : red"
        for e in data:
            if e == None:
                data2.append(e)
            else:
                data2.append(str(e))
        if len(data) == 1: 
            self.line_lote_nombre.setText(data[0])
        else: 
            try:
                self.idlote = data[0]
                self.lbl_id_lote.setText(data2[0])
                self.line_lote_idexp.setText(data2[1])
                self.line_lote_idcultivo.setText(data2[2])
                self.line_lote_nombre.setText(data2[3])
                try:
                    self.lote_dateSiembra.setDate(data[4])
                except:
                    self.label_5.setStyleSheet(style)              
                try:
                    self.lote_dateCosecha.setDate(data[5])
                except:
                    self.label_6.setStyleSheet(style)
                    pass
                try:
                    self.lote_dateFondo.setDate(data[6])
                except:
                    self.label_13.setStyleSheet(style)
                    pass
                self.line_fondo_formula.setText(data2[7])
                self.line_fondo_precio.setText(data2[8])
                self.line_fondo_calculado.setText(data2[9])
                self.line_fondo_ajustado.setText(data2[10])
                self.line_fondo_aplicado.setText(data2[11])
                try:
                    self.date_cob.setDate(data[12])
                except:
                    self.label_15.setStyleSheet(style)
                    pass
                self.line_cob_formula.setText(data2[13])
                self.line_cob_precio.setText(data2[14])
                self.line_cob_calculado.setText(data2[15])
                self.line_cob_ajustado.setText(data2[16])
                self.line_cob_aplicado.setText(data2[17])
                try:
                    self.date_cob_2.setDate(data[18])
                except:
                    self.label_20.setStyleSheet(style)
                    pass
                self.line_cob_formula_2.setText(data2[19])
                self.line_cob_precio_2.setText(data2[20])
                self.line_cob_calculado_2.setText(data2[21])
                self.line_cob_ajustado_2.setText(data2[22])
                self.line_cob_aplicado_2.setText(data2[23])
                try:
                    self.date_cob_3.setDate(data[24])
                except:
                    self.label_26.setStyleSheet(style)
                    pass
                self.line_cob_formula_3.setText(data2[25])
                self.line_cob_precio_3.setText(data2[26])
                self.line_cob_calculado_3.setText(data2[27])
                self.line_cob_ajustado_3.setText(data2[28])
                self.line_cob_aplicado_3.setText(data2[29])
                self.btn_lote_update.setEnabled(True)
                # self.btn_crear_campania.setEnabled(True)
                # self.line_lote_nombre.setEnabled()
            except Exception as ex:
                print(ex)
                pass


    def returnIdParcela(self,param):
        self.idParcela = param
        # print(self.sqlParcela)
    def returnSqlParcela(self,sql): 
        self.sqlParcela = sql

    def parcelaDialog(self):       

        dialog = parcelaFindDialog()
        dialog.loadData()
        dialog.actualizar.connect(self.populateParcela)
        dialog.sqlSignal.connect(self.returnSqlParcela)
        dialog.idParcelaSignal.connect(self.returnIdParcela)

        dialog.exec_()
    
    def loteDialog(self):     
        dialog = loteFindDialog()
        dialog.loadData()
        dialog.pushButton_2.setEnabled(False)
        dialog.pushButton_3.setEnabled(False)
        dialog.actualizar.connect(self.populateLote)
        dialog.exec_()  

    def expDialog(self):
        dialog = expFindDialog()
        dialog.loadData()
        dialog.getIdExp.connect(self.popIdExp)
        dialog.exec_()
    
    def popIdExp(self, value):

        self.line_lote_idexp.setText(f'{value}')

    def cultivoDialog(self):
        dialog = cultivoFindDialog()
        dialog.loadData()
        dialog.getIdCultivo.connect(self.popIdCultivo)
        dialog.exec_()

    def popIdCultivo(self,value):
        
        self.line_lote_idcultivo.setText(f'{value}')

    def resetStyleLabels(self):
        style = 'font-weight: normal ; color : black'
        self.label_5.setStyleSheet(style)
        self.label_6.setStyleSheet(style)
        self.label_13.setStyleSheet(style)
        self.label_15.setStyleSheet(style)
        self.label_20.setStyleSheet(style)
        self.label_26.setStyleSheet(style)


    def setLineFormatValidator(self):
        self.doubleFormat = QRegExpValidator(QRegExp(r'^[0-9]\d*(\.\d+)?$'))
        self.line_fondo_precio.setValidator(self.doubleFormat)
        self.line_fondo_calculado.setValidator(self.doubleFormat)
        self.line_fondo_ajustado.setValidator(self.doubleFormat)
        self.line_fondo_aplicado.setValidator(self.doubleFormat)
        self.line_cob_precio.setValidator(self.doubleFormat)
        self.line_cob_calculado.setValidator(self.doubleFormat)
        self.line_cob_ajustado.setValidator(self.doubleFormat)
        self.line_cob_aplicado.setValidator(self.doubleFormat)
        self.line_cob_precio_2.setValidator(self.doubleFormat)
        self.line_cob_calculado_2.setValidator(self.doubleFormat)
        self.line_cob_ajustado_2.setValidator(self.doubleFormat)
        self.line_cob_aplicado_2.setValidator(self.doubleFormat)
        self.line_cob_precio_3.setValidator(self.doubleFormat)
        self.line_cob_calculado_3.setValidator(self.doubleFormat)
        self.line_cob_ajustado_3.setValidator(self.doubleFormat)
        self.line_cob_aplicado_3.setValidator(self.doubleFormat)

        ###########################################################

        self.integerFormat = QRegExpValidator(QRegExp(r'^[0-9]\d*$'))
        self.ln_par_agg.setValidator(self.integerFormat)
        self.ln_par_zona.setValidator(self.integerFormat)
        self.ln_par_poly.setValidator(self.integerFormat)
        self.ln_par_parcela.setValidator(self.integerFormat)
        self.ln_par_recinto.setValidator(self.integerFormat)
        self.line_lote_idexp.setValidator(self.integerFormat)
        self.line_lote_idcultivo.setValidator(self.integerFormat)

        ##############################################################

        self.untilDate.setDate(QDate.currentDate())

    def validarNombre(self):
                
        if self.line_lote_nombre.text() != '' : 
            self.btn_crear_lote.setEnabled(True)
        else: 
            self.btn_crear_lote.setEnabled(False)

        if self.line_lote_idexp.text() != '' and self.line_lote_idcultivo.text() != '' and self.line_lote_nombre.text() != '':
            self.btn_crear_campania.setEnabled(True)
        else: 
            self.btn_crear_campania.setEnabled(False)

    def setStyleLines(self):
        style = ''' color: black ; font-weight: bold  '''
        self.ln_par_nombre.setStyleSheet(style)
        self.ln_par_agg.setStyleSheet(style)
        self.ln_par_zona.setStyleSheet(style)
        self.ln_par_poly.setStyleSheet(style)
        self.ln_par_parcela.setStyleSheet(style)
        self.ln_par_recinto.setStyleSheet(style)
        self.line_lote_nombre.setStyleSheet(style)
        self.line_lote_idexp.setStyleSheet(style)
        self.line_lote_idcultivo.setStyleSheet(style)
        self.line_fondo_formula.setStyleSheet(style)
        self.line_fondo_precio.setStyleSheet(style)
        self.line_fondo_calculado.setStyleSheet(style)
        self.line_fondo_ajustado.setStyleSheet(style)
        self.line_fondo_aplicado.setStyleSheet(style)
        self.line_cob_formula.setStyleSheet(style)
        self.line_cob_precio.setStyleSheet(style)
        self.line_cob_calculado.setStyleSheet(style)
        self.line_cob_ajustado.setStyleSheet(style)
        self.line_cob_aplicado.setStyleSheet(style)
        self.line_cob_formula_2.setStyleSheet(style)
        self.line_cob_precio_2.setStyleSheet(style)
        self.line_cob_calculado_2.setStyleSheet(style)
        self.line_cob_ajustado_2.setStyleSheet(style)
        self.line_cob_aplicado_2.setStyleSheet(style)
        self.line_cob_formula_3.setStyleSheet(style)
        self.line_cob_precio_3.setStyleSheet(style)
        self.line_cob_calculado_3.setStyleSheet(style)
        self.line_cob_ajustado_3.setStyleSheet(style)
        self.line_cob_aplicado_3.setStyleSheet(style)

    def populateComboProv(self): 
        conn = self.conn
        cursor = conn.cursor(cursor_factory = extras.RealDictCursor)
        cursor.execute('select nombre,idprovincia from datos.provincia order by nombre')
        datos = cursor.fetchall()
        for row in datos: 
            self.prov_combo.addItem(row["nombre"],row["idprovincia"])        
        self.prov_combo.setStyleSheet("QComboBox { combobox-popup: 0; font-size: 10pt}")
    def indexProvUpdate(self):
        idprov = str(self.prov_combo.currentData())
        # print(idprov)
        self.mcpo_combo.clear()
        self.populateComboMcpo(idprov)   
    def populateComboMcpo(self,idprov):
        self.mcpo_combo.setStyleSheet("QComboBox { combobox-popup: 0; }")
        conn = self.conn
        try:
            cursor = conn.cursor(cursor_factory = extras.RealDictCursor)
            cursor.execute(f'''select nombre,idmunicipio from datos.municipio where idprovincia = '{idprov}' order by nombre ''')
            datos = cursor.fetchall()
            for row in datos:
                self.mcpo_combo.addItem(row["nombre"], row["idmunicipio"])        
        except errors.lookup('22P02'):
            #  print('error')
             conn.rollback()
             pass

    def crearAmbientes(self):
        self.tools.crearAmbientes(self)

    def crearSegmentos(self):
        self.tools.crearSegmentos(self)

    def cargarParcela(self):
        idsigpac = self.lbl_id_parcela.text()
        self.tools.cargarParcela(self,idsigpac)

    def segmentoDialog(self):
        dialog = agraeSegmentoDialog()
        dialog.exec_() 

    def buscarSegmento(self):

        print('prueba buscar segmento')
        param = self.line_find_segmento.text()
        sql = self.utils.segmentosQueryTable(str(param))
        # sql = 'select * from lotes'
        self.sqlSegmento = sql
        
        try: 
            with self.conn as conn: 
                cursor = conn.cursor() 
                cursor.execute(sql)
                data = cursor.fetchall() 
                # print(data)
                a = len(data)
                b = len(data[0])
                i = 1
                j = 1
                self.tableWidget_2.setRowCount(a)
                self.tableWidget_2.setColumnCount(b)
                for j in range(a):
                    for i in range(b):
                        item = QTableWidgetItem(str(data[j][i]))
                        self.tableWidget_2.setItem(j,i,item)
                
                # self.btn_add_layer_2.setEnabled(True)
        
        except Exception as ex:
            print(ex)

    def codificarSegmento(self): 
        self.tools.asignarCodigoSegmento(self)
    
    def cargarSegmentosLote(self): 
        print('ok')
        dns = self.dns
        # selected = widget.tableWidget.selectionModel().selectedRows()
        # if len(selected) == 0:
        #     msg = 'Debes seleccionar un lote'
        #     QMessageBox.about(widget, "aGrae GIS:", f"{msg}")
        # elif len(selected) > 1:
        #     msg = 'Debes seleccionar solo un lote'
        #     QMessageBox.about(widget, "aGrae GIS:", f"{msg}")
        # else:
        row = self.tableWidget_2.currentRow()
        idlotecampania = self.tableWidget_2.item(row, 1).text()
        lote = self.tableWidget_2.item(row, 2).text()
        cultivo = self.tableWidget_2.item(row, 6).text()
        exp = f''' "idlotecampania" = {idlotecampania} '''
        uri = QgsDataSourceUri()
        uri.setConnection(dns['host'], dns['port'],
                          dns['dbname'], dns['user'], dns['password'])
        uri.setDataSource('public', 'segmentos', 'geometria', exp, 'id')
        nombreCapa = f'Segmentos Lote {lote}-{cultivo}'
        layer = QgsVectorLayer(uri.uri(False), nombreCapa, 'postgres')
        if layer is not None and layer.isValid():
            QgsProject.instance().addMapLayer(layer)
            iface.setActiveLayer(layer)
            iface.zoomToActiveLayer()

    def sinceDateChange(self):
        self.sinceDateStatus = True
        d1 = self.sinceDate.date()
        self.untilDate.setMinimumDate(d1)
        self.untilDate.setEnabled(True)

    def buscarLotes(self):
        self.tools.buscarLotes(self, self.sinceDateStatus)
        self.line_buscar.setText('')

    def reloadLotes(self):
        self.tools.buscarLotes(self, False)
        self.btn_reload.setEnabled(False)

    def cargarLote(self):
        dns = self.dns
        row = self.tableWidget.currentRow()
        idlotecampania = self.tableWidget.item(row, 0).text()
        loteNombre = self.tableWidget.item(row, 1).text()
        parcela = self.tableWidget.item(row, 2).text()
        cultivo = self.tableWidget.item(row, 5).text()
        sql = f'''select p.idparcela from parcela p, lotes ls
            where st_within(p.geometria,ls.geometria) and ls.idlotecampania = {idlotecampania}
            '''

        cursor = self.conn.cursor() 
        cursor.execute(sql)
        data = cursor.fetchall()
        s = ",".join([str(e[0]) for e in data])
        # print(s) 
        exp = f''' "idparcela" in ({s}) ''' # print(exp)

        uriSegmentos = QgsDataSourceUri()
        uriSegmentos.setConnection(dns['host'], dns['port'],
                          dns['dbname'], dns['user'], dns['password'])
        uriSegmentos.setDataSource(
            'public', 'segmentos', 'geometria', f'"idlotecampania" = {idlotecampania}', 'id')
        lyrSegmentos = QgsVectorLayer(uriSegmentos.uri(
            False), f'''SEGMENTOS {loteNombre}-{cultivo}''', 'postgres')
        

        uriParcelas = QgsDataSourceUri()
        uriParcelas.setConnection(dns['host'], dns['port'],
                                  dns['dbname'], dns['user'], dns['password'])
        uriParcelas.setDataSource(
            'public', 'parcela', 'geometria', exp, 'idparcela')
        lyrParcelas = QgsVectorLayer(uriParcelas.uri(
            False), f'{parcela}-{loteNombre}-{cultivo}', 'postgres')

        QgsProject.instance().addMapLayer(lyrSegmentos)
        QgsProject.instance().addMapLayer(lyrParcelas)
        self.tools.cargarLote(self)
        


    def addLotesMap(self):
        sql = f'select * from lotes'
        nombre = 'aGrae Lotes'
        self.tools.addMapLayer('lotes',nombre,id='id')

    def addSegmentosMap(self): 
        self.tools.addMapLayer('segmentos','aGrae Segmentos',id='id')
    def addParcelasMap(self):
        sql = f'select * from parcela'
        nombre = 'aGrae Parcelas'
        # self.tools.addMapLayer(sql, nombre,'idparcela')
        self.tools.addMapLayer('parcela',nombre)
    def heavyTask(self): 
        self.thread = QThread()
        self.worker = Worker()
        self.worker.moveToThread(self.thread)
        self.thread.started.connect(self.worker.addLotesMap)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater) 
        self.thread.finished.connect(self.thread.deleteLater)
        self.thread.start()
        self.btn_add_lotes.setEnabled(False)
        self.btn_add_lotes.setText('Cargando')
        self.thread.finished.connect(lambda: self.btn_add_lotes.setEnabled(True))
        self.thread.finished.connect(lambda: self.btn_add_lotes.setText('Agregar Lotes'))

    
        


        


        

        
        

class loteFilterDialog(QtWidgets.QDialog,agraeLoteParcelaDialog): 

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(loteFilterDialog, self).__init__(parent)
        # self.s = QSettings('agrae', 'dbhost')
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.utils = AgraeUtils()
        self.tools = AgraeToolset()
        self.conn = self.utils.Conn()
        self.UIcomponents()
        self.sinceDateStatus = False

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def UIcomponents(self):
        self.lotesCompleter()



        icons_path = self.utils.iconsPath()
        self.sinceDate.dateChanged.connect(self.sinceDateChange)
        self.line_buscar.setClearButtonEnabled(True)
        line_buscar_action = self.line_buscar.addAction(QIcon(icons_path['search_icon_path']), self.line_buscar.TrailingPosition)
        line_buscar_action.triggered.connect(self.buscarLotes)
        self.btn_add_layer.setIcon(QIcon(icons_path['add_layer_to_map']))
        self.btn_add_layer.setIconSize(QtCore.QSize(20, 20))
        self.btn_add_layer.clicked.connect(self.cargarLote)
        # self.btn_add_layer.clicked.connect(self.selectedRows)
        
        self.btn_reload.setIcon(QIcon(icons_path['reload_data']))
        self.btn_reload.setIconSize(QtCore.QSize(20, 20))
        self.btn_reload.setToolTip('Buscar todos los lotes')
        self.btn_reload.clicked.connect(self.reloadLotes)

        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        # self.tableWidget.setColumnHidden(0, True)
        # self.tableWidget.setColumnHidden(4, True)
        # self.tableWidget.setColumnHidden(6, True)



        pass
    def sinceDateChange(self):
        self.sinceDateStatus = True
        d1 = self.sinceDate.date()
        self.untilDate.setMinimumDate(d1)
        self.untilDate.setEnabled(True)

    def buscarLotes(self): 
        self.tools.buscarLotes(self,self.sinceDateStatus)
        self.line_buscar.setText('')
        
    def reloadLotes(self): 
        self.tools.buscarLotes(self,False)
        self.btn_reload.setEnabled(False)
        
    def cargarLote(self): 
        self.tools.cargarLote(self)

    def lotesCompleter(self):
        cursor = self.conn.cursor()
        sql = '''select distinct unnest(array[l.nombre, p.nombre, c.nombre]) from lote l
        left join lotecampania lc on lc.idlote = l.idlote
        left join campania ca on ca.idcampania = lc.idcampania 
        left join loteparcela lp on lc.idlotecampania = lp.idlotecampania 
        left join parcela p on lp.idparcela = p.idparcela
        left join cultivo c on c.idcultivo = ca.idcultivo'''
        cursor.execute(sql)
        data = cursor.fetchall()
        listaLotes = [e[0] for e in data]
        # print(listaLotes)
        completerLotes = QCompleter(listaLotes)
        completerLotes.setCaseSensitivity(False)
        self.line_buscar.setCompleter(completerLotes)              


class Worker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)

    tools = AgraeToolset()

    def run(self):
        for i in range(10+1):
            sleep(1)
            self.progress.emit(i + 1)
        self.finished.emit()

    def addLotesMap(self):
        sql = f'select * from lotes'
        nombre = 'aGrae Lotes'  
        try:
            uri = QgsDataSourceUri()
            uri.setConnection('localhost', '5432',
                          'agrae', 'postgres', '23826405')
            uri.setDataSource('public','lotes','geometria','')
            lyr = QgsVectorLayer(uri.uri(False),nombre,'postgres')
            
            # print(lyr)
            self.finished.emit()    
            # self.tools.addMapLayer(sql, nombre, 'idlotecampania')
        except Exception as ex: 
            print(ex)
            self.finished.emit()

        QgsProject.instance().addMapLayer(lyr)             
        

    def addParcelasMap(self):
        sql = f'select * from parcela'
        nombre = 'aGrae Parcelas'
        
        tools.addMapLayer(sql, nombre, 'idparcela')

    
