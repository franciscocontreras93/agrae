# -*- coding: utf-8 -*-
"""
/***************************************************************************
agraeDockWidget
                                 A QGIS plugin
 Conjunto de herramientas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-12-03
        git sha              : $Format:%H$
        copyright            : (C) 2021 by  aGrae Solutions, S.L.
        email                : info@agrae.es
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import csv
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import psycopg2
import time
from datetime import datetime
# from datetime import date
from PIL import Image, ImageDraw, ImageFont
from psycopg2 import OperationalError,InterfaceError, errors, extras
from PyQt5.QtCore import QRegExp, QDate, Qt, QObject, QAbstractTableModel
from PyQt5.QtGui import QRegExpValidator, QIcon, QPixmap, QFont
from PyQt5.QtWidgets import *
from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal, pyqtSlot, QSettings
from qgis.core import *
from qgis.utils import iface
from .agrae_dialogs import agraeSegmentoDialog, agraeParametrosDialog, cultivoFindDialog
from .utils import AgraeUtils, AgraeToolset,  AgraeAnalitic, TableModel, PanelRender

from .agraeTools import agraeToolset
from .resources import *

from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from PyQt5 import QtCore, QtWidgets
import sys
import matplotlib
import threading




agraeSidePanel, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/agrae_dockwidget_base.ui'))
agraeConfigPanel, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/config_ui.ui'))
agraeMainPanel, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/agrae_main.ui'))
agraeParcelaDialog, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/dialogs/parcela_dialog.ui'))

agraeLoteDialog, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/dialogs/lote_dialog.ui'))
agraeLoteParcelaDialog, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/dialogs/loteparcela_dialog.ui'))
agraeExpDialog, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/dialogs/exp_dialog.ui'))
agraeCultivoDialog, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/dialogs/cultivo_dialog.ui'))

agraeAnaliticaDialog, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ui/dialogs/analitica_dialog.ui'))

class agraeDockWidget(QtWidgets.QDockWidget, agraeSidePanel):
    closingPlugin = pyqtSignal()
    def __init__(self, parent=None):
        """Constructor."""
        super(agraeDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton.clicked.connect(self.select_input_file)

    def select_input_file(self):
        filename = QFileDialog.getOpenFileName(None,'Seleccionar archivo')
        # print(filename[0])
        self.lineEdit.setText(filename[0])
        # print(len(self.lineEdit.text()))
    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()


class agraeConfigWidget(QtWidgets.QDialog, agraeConfigPanel): 
    closingPlugin2 = pyqtSignal()
    def __init__(self, parent=None):
        """Constructor."""
        super(agraeConfigWidget, self).__init__(parent)
        self.s = QSettings('agrae','dbhost')
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)      
    
    def closeEvent(self, event):  
        self.closingPlugin2.emit()
        event.accept()

class parcelaFindDialog(QtWidgets.QDialog, agraeParcelaDialog):
    closingPlugin = pyqtSignal()

    actualizar = pyqtSignal(list)
    sqlSignal = pyqtSignal(str)
    idParcelaSignal = pyqtSignal(str)

    def __init__(self, parent=None):
        """Constructor."""
        super(parcelaFindDialog, self).__init__(parent)
        self.utils = AgraeUtils()
        self.tools = AgraeToolset()
        self.conn = self.utils.Conn()
        self.idParcela = None     
        self.setupUi(self)
        self.UIcomponents()
        self.buscar()
        



    def closeEvent(self, event):

        self.closingPlugin.emit()

        event.accept()

    def UIcomponents(self):
        icons_path = self.utils.iconsPath() 
        data = self.dataAuto()
        lista = [e[0] for e in data]
        completer = QCompleter(lista)
        completer.setCaseSensitivity(False)
        self.lineEdit.setCompleter(completer)       
        self.tableWidget.horizontalHeader().setStretchLastSection(True)

        self.pushButton.setIconSize(QtCore.QSize(20, 20))
        self.pushButton.setIcon(QIcon(icons_path['load_data']))
        self.pushButton.setToolTip('Cargar Datos al Formulario')
        self.pushButton.clicked.connect(self.cargarParcela)
        
        self.pushButton_2.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_2.setIcon(QIcon(icons_path['add_layer_to_map']))
        self.pushButton_2.clicked.connect(self.agregarParcelaMapa)
        self.pushButton_2.setToolTip('Añadir Parcela al Mapa')
        
        self.pushButton_3.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_3.setIcon(QIcon(icons_path['pen-to-square']))
        self.pushButton_3.setToolTip('Renombrar Parcelas')
        self.pushButton_3.clicked.connect(self.renameParcelas)

        self.pushButton_4.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_4.setIcon(QIcon(icons_path['add_group_layers']))
        self.pushButton_4.setToolTip('Añadir grupo de parcelas')
        self.pushButton_4.clicked.connect(self.agregarGrupoParcelasMapa)

        self.lineEdit.setClearButtonEnabled(True)
        line_buscar_action = self.lineEdit.addAction(
            QIcon(icons_path['search_icon_path']), self.lineEdit.TrailingPosition)
        line_buscar_action.triggered.connect(self.buscar)

    def data(self, filtro=None):
        if filtro == None:
            cursor = self.conn.cursor()
            sql = '''select p.idparcela, p.nombre parcela ,(case when lp2.parcela >= 1 then 'Si' else 'No' end) relacion ,
            (case when l.nombre is null then '' else l.nombre end) lote ,prov.nombre provincia, mcpo.nombre municipio,  cu.nombre cultivo , 
            ca.fechasiembra, ca.fechacosecha , p.idsigpac
            from parcela p
            left join loteparcela lp on lp.idparcela = p.idparcela 
            left join lotecampania lc on lc.idlotecampania =lp.idlotecampania 
            left join lote l on l.idlote = lc.idlote 
            left join (select lp.idparcela, count(*) as parcela from loteparcela as lp group by lp.idparcela) as lp2  on lp2.idparcela = p.idparcela
            left join campania ca on ca.idcampania = lc.idcampania 
            left join cultivo cu on cu.idcultivo = ca.idcultivo 
            join datos.provincia prov on prov.idprovincia = p.provincia 
            join datos.municipio mcpo on mcpo.cod_municipio = p.municipio and mcpo.idprovincia = prov.idprovincia
            order by l.nombre   '''
            cursor.execute(sql)
            data = cursor.fetchall()
        else:
            cursor = self.conn.cursor()
            sql = f""" select p.idparcela, p.nombre parcela ,(case when lp2.parcela >= 1 then 'Si' else 'No' end) relacion ,
            (case when l.nombre is null then '' else l.nombre end) lote ,prov.nombre provincia, mcpo.nombre municipio,  cu.nombre cultivo , 
            ca.fechasiembra, ca.fechacosecha , p.idsigpac
            from parcela p
            left join loteparcela lp on lp.idparcela = p.idparcela 
            left join lotecampania lc on lc.idlotecampania =lp.idlotecampania 
            left join lote l on l.idlote = lc.idlote 
            left join (select lp.idparcela, count(*) as parcela from loteparcela as lp group by lp.idparcela) as lp2  on lp2.idparcela = p.idparcela
            left join campania ca on ca.idcampania = lc.idcampania 
            left join cultivo cu on cu.idcultivo = ca.idcultivo 
            join datos.provincia prov on prov.idprovincia = p.provincia 
            join datos.municipio mcpo on mcpo.cod_municipio = p.municipio and mcpo.idprovincia = prov.idprovincia   
            where p.nombre ilike '%{filtro}%' or l.nombre ilike '%{filtro}%' or prov.nombre ilike '%{filtro}%' or mcpo.nombre ilike '%{filtro}%' or p.idsigpac ilike '%{filtro}%'
            order by l.nombre """          
            # or p.agregado ilike '%{filtro}%' or p.zona ilike '%{filtro}%' or p.poligono ilike '%{filtro}%' or p.parcela ilike '%{filtro}%' or p.recinto ilike '%{filtro}%' order by p.idparcela """
            cursor.execute(sql)
            data = cursor.fetchall()
        if len(data) >= 1:
            return data
        elif len(data) == 0:
            data = [0, 0]
            return data

    def dataAuto(self):
        cursor = self.conn.cursor()
        sql = """select distinct unnest(array[p.nombre, prov.nombre, mcpo.nombre])
        from parcela p 
        left join datos.provincia prov on p.provincia = prov.idprovincia 
        join datos.municipio mcpo on mcpo.cod_municipio = p.municipio and mcpo.idprovincia = prov.idprovincia  """     
        cursor.execute(sql)
        data = cursor.fetchall()
        return data
    def populate(self,data):
        try:
            a = len(data)
            b = len(data[0])
            i = 1
            j = 1
            self.tableWidget.setRowCount(a)
            self.tableWidget.setColumnCount(b)
            for j in range(a):
                for i in range(b):
                    item = QTableWidgetItem(str(data[j][i]).upper())
                    self.tableWidget.setItem(j, i, item)                 
        except:
            QMessageBox.about(self, "Error:", "No Existen Registros")
            # print('error')

    def loadData(self,param=None):    
        if param == None:  
            data = self.data()
            self.populate(data)
        else:
            data = self.data(param)
            self.populate(data)
        pass
    def buscar(self):
        filtro = self.lineEdit.text()
        self.loadData(filtro)
        pass

    def cargarParcela(self):
        # value = self.tableWidget.item(0, 1).text()
        # print(str(value))
        try:
            row = self.tableWidget.currentRow()
            # column = self.tableWidget.currentColumn()
            param = self.tableWidget.item(row, 0).text()
            self.idParcela = param
            sqlQuery = f"""select * from parcela where idparcela = {param} """
            conn = self.conn
            cursor = conn.cursor()
            cursor.execute(sqlQuery)
            data = cursor.fetchone()
            dataLista = list(data)
            self.actualizar.emit(dataLista)
            self.idParcelaSignal.emit(param)
            self.sqlSignal.emit(sqlQuery)
            self.close()
          
        except Exception as ex:
            print(ex)

            QMessageBox.about(self,'aGrae GIS', 'Debe Seleccionar una parcela para agregar') 
        pass
    

    def agregarParcelaMapa(self):
        row = self.tableWidget.currentRow()
        self.idParcela = self.tableWidget.item(row,0).text()
        idsigpac = self.tableWidget.item(row, 9).text()
        self.tools.cargarParcela(self, idsigpac)

    def agregarGrupoParcelasMapa(self): 
        # print('ALGO')
        self.tools.cargarGrupoParcelas(self)

    def renameParcelas(self): 
        self.tools.renameParcela(self)

class loteFindDialog(QtWidgets.QDialog, agraeLoteDialog):
    closingPlugin = pyqtSignal()
    actualizar = pyqtSignal(list)
    getNombreLote = pyqtSignal(str)
    
    def __init__(self, parent=None):

        """Constructor."""
        super(loteFindDialog, self).__init__(parent)      
        self.utils = AgraeUtils()
        self.tools = AgraeToolset()
        self.conn = self.utils.Conn()
        
        self.setupUi(self)
        self.UIcomponents()
        

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def UIcomponents(self):
        icons_path = self.utils.iconsPath()
        # columna geometria loteparcela
        self.tableWidget.setColumnHidden(6, True)
        self.tableWidget.setColumnHidden(0, True)

        self.lineEdit.setClearButtonEnabled(True)
        line_buscar_action = self.lineEdit.addAction(
            QIcon(icons_path['search_icon_path']), self.lineEdit.TrailingPosition)
        line_buscar_action.triggered.connect(self.buscar)

        self.line_lote_nombre.setClearButtonEnabled(True)
        line_crear_action = self.line_lote_nombre.addAction(
            QIcon(icons_path['save']), self.line_lote_nombre.TrailingPosition)
        line_crear_action.triggered.connect(self.crearLote)

        # self.lineEdit_2.textChanged.connect(self.setButtonEnabled)
        
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        # self.tableWidget.setColumnHidden(0,True)
        
        self.btn_cargar_lote.setIconSize(QtCore.QSize(20, 20))
        self.btn_cargar_lote.setIcon(QIcon(icons_path['share']))        
        self.btn_cargar_lote.clicked.connect(self.cargarLote)
        
        self.btn_cargar_camp.setIconSize(QtCore.QSize(20, 20))
        self.btn_cargar_camp.setIcon(QIcon(icons_path['load_data']))        
        self.btn_cargar_camp.clicked.connect(self.cargarCampania)
        
        self.pushButton_2.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_2.setIcon(QIcon(icons_path['link']))
        self.pushButton_2.clicked.connect(self.crearRelacionLoteParcela)
        

        self.pushButton_3.setIconSize(QtCore.QSize(20, 20))
        self.pushButton_3.setIcon(QIcon(icons_path['link-slash']))
        self.pushButton_3.clicked.connect(self.dropRelation)
        

        
        self.btn_reload.setIconSize(QtCore.QSize(20, 20))
        self.btn_reload.setIcon(QIcon(icons_path['reload_data']))
        self.btn_reload.clicked.connect(self.lotesReload)


        data = self.data()
        try:
            lista = [e[1] for e in data]
        except:
            lista = []
        completer = QCompleter(lista)
        completer.setCaseSensitivity(False)
        self.lineEdit.setCompleter(completer)

    def data(self, filtro=None):
        if filtro == None:
            cursor = self.conn.cursor()
            sql = """select lc.idlotecampania , l.nombre lote, (case when sq1.parcelas >= 1 then coalesce(sq1.parcelas,0)::varchar(10) else 'No' end) parcelas, 
            ca.fechasiembra, ca.fechacosecha, cu.nombre cultivo
            from lote l
            left join lotecampania lc on lc.idlote = l.idlote 
            left join 
                (select lc2.idlotecampania, count(*) parcelas from loteparcela lc2 group by idlotecampania ) as sq1 
                on sq1.idlotecampania = lc.idlotecampania
            left join campania ca on ca.idcampania = lc.idcampania 
            left join cultivo cu on cu.idcultivo = ca.idcultivo 
            order by ca.fechasiembra asc"""
            cursor.execute(sql)
            data = cursor.fetchall()
            self.btn_reload.setEnabled(False)
        else:
            cursor = self.conn.cursor()
            sql = f"""select lc.idlotecampania , l.nombre lote, (case when sq1.parcelas >= 1 then coalesce(sq1.parcelas,0)::varchar(10) else 'No' end) parcelas, 
            ca.fechasiembra, ca.fechacosecha, cu.nombre cultivo
            from lote l
            left join lotecampania lc on lc.idlote = l.idlote 
            left join 
                (select lc2.idlotecampania, count(*) parcelas from loteparcela lc2 group by idlotecampania ) as sq1 
                on sq1.idlotecampania = lc.idlotecampania
            left join campania ca on ca.idcampania = lc.idcampania 
            left join cultivo cu on cu.idcultivo = ca.idcultivo 
            where l.nombre ilike '%{filtro}%'
            or cu.nombre ilike '%{filtro}%' 
            order by ca.fechasiembra asc """
            self.btn_reload.setEnabled(True)
            cursor.execute(sql)
            data = cursor.fetchall()
        if len(data) >= 1:
            return data
        elif len(data) == 0:
            data = [0, 0]
            return data

    def populate(self,data):
        try:
            a = len(data)
            b = len(data[0])
            i = 1
            j = 1
            self.tableWidget.setRowCount(a)
            self.tableWidget.setColumnCount(b)
            for j in range(a):
                for i in range(b):
                    item = QTableWidgetItem(str(data[j][i]))
                    self.tableWidget.setItem(j, i, item)
        except:
            QMessageBox.about(self, "Error:", "No Existen Registros")
            print('error')


    def loadData(self,param=None):
        

        if param == None:  

            data = self.data()

            # print(data[0][1])
            self.populate(data)

        else:

            data = self.data(param)

            # print(data[0][1])
            self.populate(data)
        pass
    def lotesReload(self): 
        self.buscar(True)

    def buscar(self, reload=False):

        filtro = self.lineEdit.text()
        if reload != False:
            filtro = None

        self.loadData(filtro)
        
        pass
    
    def cargarLote(self):
        row = self.tableWidget.currentRow()
        try: 
            param = self.tableWidget.item(row, 1).text()
            self.getNombreLote.emit(param)
        except Exception as e:
            pass


    def cargarCampania(self):

        try:
            try: 
                row = self.tableWidget.currentRow()
                param = self.tableWidget.item(row, 0).text()
                sqlQuery = f""" select
                l.idlote, ca.idexplotacion, ca.idcultivo, l.nombre, ca.fechasiembra, ca.fechacosecha,
                --fondo
                ca.fechafertilizacionfondo, ca.fertilizantefondoformula, ca.fertilizantefondoprecio, ca.fertilizantefondocalculado,
                ca.fertilizantefondoajustado, ca.fertilizantefondoaplicado,
                -- cob1
                ca.fechafertilizacioncbo1, ca.fertilizantecob1formula, ca.fertilizantecob1precio, ca.fertilizantecob1calculado,
                ca.fertilizantecob1ajustado, ca.fertilizantecob1aplicado,
                -- cob2
                ca.fechafertilizacioncbo2, ca.fertilizantecob2formula, ca.fertilizantecob2precio, ca.fertilizantecob2calculado,
                ca.fertilizantecob2ajustado, ca.fertilizantecob2aplicado,
                -- cob3
                ca.fechafertilizacioncbo3, ca.fertilizantecob3formula, ca.fertilizantecob3precio, ca.fertilizantecob3calculado,
                ca.fertilizantecob3ajustado, ca.fertilizantecob3aplicado
                from lote l
                left join lotecampania lc on lc.idlote = l.idlote
                left join campania ca on ca.idcampania = lc.idcampania   
                where lc.idlotecampania = {param} """
                conn = self.conn
                cursor = conn.cursor()
                cursor.execute(sqlQuery)
                data = cursor.fetchone()
                dataLista = list(data)
                self.actualizar.emit(dataLista)
                self.close()

            except:                
                data = self.tableWidget.item(row, 1).text()
                dataLista = [data]
                self.actualizar.emit(dataLista)
                QMessageBox.about(self, 'aGrae GIS', 'El Lote que selecciono no tiene una campaña\nasociada, porfavor cree una nueva campaña para este lote.')
                self.close()
        except Exception as ex:
            print(ex)            
            QMessageBox.about(self, 'Error','Ocurrio un Error')
            pass      

    def setButtonEnabled(self):
        if self.lineEdit_2.text() != '':
            self.pushButton_2.setEnabled(True)
            self.lineEdit_2.setStyleSheet(
                'background-color: rgb(255, 255, 255);')
            
        else: 
            self.pushButton_2.setEnabled(False)
            self.lineEdit_2.setStyleSheet(
                'background-color: rgb(255, 94, 94);')
                  
    def crearRelacionLoteParcela(self):
        lyr = iface.activeLayer() 
        features = lyr.selectedFeatures()
                
        row = self.tableWidget.currentRow()
        idLote = self.tableWidget.item(row,0).text()
        error = [] 
                   
        try:
            for f in features: 
                cursor = self.conn.cursor()
                idParcela = f[1]

                try:
                    if idLote == None:
                        QMessageBox.about(self, 'aGrae GIS', f'El Lote no tiene una campaña asociada') 
                    else: 
                        sql = f''' insert into loteparcela(idparcela,idlotecampania) 
                                values({idParcela},{idLote}) '''                    
                        cursor.execute(sql)
                        # print(f'Se creo la Relacion {idParcela,idLote}')
                        self.conn.commit()
                        # self.pushButton_2.setEnabled(False)
                except errors.lookup('23505'):
                    error.append(idParcela)
                    # print(f'La parcela {f[1]} ya existe pertenece a un lote.')
                    QMessageBox.about(self, 'aGrae GIS',
                                      f'La parcela {f[1]} ya existe pertenece a un lote.')
                    self.conn.rollback()
            print('EJECUTANDO SENTENCIA NECESIDADES')
            cursor = self.conn.cursor() 
            sql = ''' insert into necesidades(idlotecampania,uf,necesidad_n,necesidad_p,necesidad_k)
            select ls.idlotecampania,
            s.segmento + amb.ambiente AS uf,
            round((amb.extraccioncosechan + amb.extraccionresiduon)*(1+s.n_inc))   necesidad_n,
            round((amb.extraccioncosechap + amb.extraccionresiduop)*(1+s.p_inc)) necesidad_p,
            round((amb.extraccioncosechak + amb.extraccionresiduok)*(1+s.k_inc)) necesidad_k
            FROM lotes ls
            left JOIN segmentos s ON st_intersects(s.geometria, ls.geometria) 
            JOIN ambientes amb ON st_intersects(ls.geometria, amb.geometria)
            where ls.idlotecampania = (select lp.idlotecampania from loteparcela lp order by lp.idloteparcela desc limit 1); '''
            cursor.execute(sql)
            self.conn.commit()
            print('FINALIZADO SENTENCIA NECESIDADES')

            
            if len(error) == 0:
                QMessageBox.about(self, 'aGrae GIS', f'Se creo la Relacion sin errores ') 
            elif len(error) >0 and len(error) <len(features): 
                QMessageBox.about(self, 'aGrae GIS', f' Las siguientes parcelas no se pudieron relacionar \n ({error})')
            elif len(error) == len(features): 
                QMessageBox.about(self, 'aGrae GIS', f'No se pudieron relacionar las Parcelas seleccionadas.')

                

        except Exception as ex: 
            print(ex)
            QMessageBox.about(self, 'aGrae GIS', f'Ocurrio un Error. ')
            self.conn.rollback()

    def dropRelation(self): 
        lyr = iface.activeLayer()
        features = lyr.selectedFeatures()
        row = self.tableWidget.currentRow()
        idLote = self.tableWidget.item(row, 0).text()
        cursor = self.conn.cursor()
        
        try:
            for f in features:
                idParcela = f[1]
                confirm = QMessageBox.question(
                    self, 'aGrae GIS', f"Seguro quiere quitar la parcela {f[11]} del lote:\n{self.tableWidget.item(row, 1).text()}-{self.tableWidget.item(row,5).text()}\nCampaña: {self.tableWidget.item(row, 3).text()}", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
                if confirm == QMessageBox.Yes:
                    sqlCheck = f'select * from loteparcela where idparcela = {idParcela} and idlotecampania = {idLote}'
                    cursor.execute(sqlCheck)
                    data = cursor.fetchall()
                    if len(data) < 1:
                        # print('No existe la relacion entre la parcela y el lote seleccionado')
                        self.conn.rollback()
                    else:
                        _confirm = QMessageBox.question(
                            self, 'aGrae GIS', f"Datos Correctos. Desea Continuar?", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
                        if _confirm == QMessageBox.Yes: 
                            sql = f'''
                            begin;

                            delete from loteparcela where idparcela = {idParcela} and idlotecampania = {idLote};

                            delete from necesidades where idlotecampania = {idLote};

                            commit;'''
                            cursor.execute(sql)
                            self.conn.commit()
                        else: 
                            self.conn.rollback()
                            

        
        except Exception as ex:
            print(ex) 
            pass
    
    def crearLote(self):
        try:
            self.tools.crearLote(self)
        except Exception as ex:
            print(ex)
            pass

class expFindDialog(QtWidgets.QDialog, agraeExpDialog):
    closingPlugin = pyqtSignal()
    getIdExp = pyqtSignal(int)
    
    def __init__(self, parent=None):
        """Constructor."""
        super(expFindDialog, self).__init__(parent)
        self.utils = AgraeUtils()
        self.conn = self.utils.Conn()
        
        
        # print(lista)
        
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.UIcomponents()

    def selectIdExp(self): 
        row = self.tableWidget.currentRow()
        idExp = int(self.tableWidget.item(row,0).text())
        self.getIdExp.emit(idExp)
        self.close()

    def UIcomponents(self):
        
        data = self.dataAuto()
        lista = [e[0] for e in data]
        completer = QCompleter(lista)
        completer.setCaseSensitivity(False)

        icons_path = self.utils.iconsPath() 
        self.lineEdit.setClearButtonEnabled(True)
        line_buscar_action = self.lineEdit.addAction(
            QIcon(icons_path['search_icon_path']), self.lineEdit.TrailingPosition)
        line_buscar_action.triggered.connect(self.buscar)
        # self.btn_buscar.clicked.connect(self.buscar)
        self.pushButton.clicked.connect(self.selectIdExp)
        self.pushButton.setIconSize(QtCore.QSize(20, 20))
        self.pushButton.setIcon(QIcon(icons_path['share']))

        self.pushButton_2.clicked.connect(self.crear)

        self.lineEdit.setCompleter(completer)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)


    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def data(self, filtro=None):
        if filtro == None:
            cursor = self.conn.cursor()
            sql = "select idexplotacion,nombre, direccion from explotacion order by idexplotacion"
            cursor.execute(sql)
            data = cursor.fetchall()
        else:
            cursor = self.conn.cursor()
            sql = f"select idexplotacion,nombre, direccion from explotacion where nombre ilike '%{filtro}%' or direccion ilike '%{filtro}%' order by idexplotacion "
            cursor.execute(sql)
            data = cursor.fetchall()
        if len(data) >= 1:
            return data
        elif len(data) == 0:
            data = [0, 0]
            return data
    def dataAuto(self):
        cursor = self.conn.cursor()
        sql = "select nombre from explotacion union select direccion from explotacion"
        cursor.execute(sql)
        data = cursor.fetchall()
        return data

    def populate(self, data):
        try:
            a = len(data)
            b = len(data[0])
            i = 1
            j = 1
            self.tableWidget.setRowCount(a)
            self.tableWidget.setColumnCount(b)
            for j in range(a):
                for i in range(b):
                    item = QTableWidgetItem(str(data[j][i]))
                    self.tableWidget.setItem(j, i, item)
        except:
            QMessageBox.about(self, "Error:", "No Existen Registros")
            # print('error')

    def loadData(self, param=None):
        if param == None:
            data = self.data()
            self.populate(data)
        else:
            data = self.data(param)
            self.populate(data)
        pass

    def buscar(self):
        filtro = self.lineEdit.text()
        self.loadData(filtro)
        pass
    
    def crear(self): 
        cursor = self.conn.cursor() 
        nombre = self.lineEdit_2.text()
        direccion = self.lineEdit_3.text()
        if nombre != '' and direccion != '': 
            try:
                sql = f''' insert into explotacion(nombre,direccion)
                values('{nombre}','{direccion}') '''
                cursor.execute(sql)
                self.conn.commit()
                QMessageBox.about(self, "aGrae GIS:", "Se creo correctamente")
            except Exception as ex: 
                print(ex)
                QMessageBox.about(self, "Error:", "Error revisa la consola")
                self.conn.rollback()
        else: 
            QMessageBox.about(self, "Error:", "Debes rellenar todos los campos")

class ReadOnlyDelegate(QtWidgets.QStyledItemDelegate):
    def createEditor(self, parent, option, index):
        return


class agraeMainWidget(QtWidgets.QMainWindow, agraeMainPanel):

    closingPlugin = pyqtSignal()
    dataSignal = pyqtSignal(tuple)
    def __init__(self, parent=None):
        """Constructor."""      
        super(agraeMainWidget, self).__init__(parent)  

        self.utils = AgraeUtils()
        self.tools = AgraeToolset()
        self.analitic = AgraeAnalitic()
        self.conn = self.utils.Conn()
        self.style = self.utils.styleSheet()
        self.idlote = None
        self.idParcela = None
        self.sqlParcela = ''
        self.sqlSegmento = ''

        self.sinceDateStatus = False

        self.dns = self.utils.dns

        self.lastCode = self.tools.lastCode()
        self.editTexturaStatus = False

        
              
        self.setupUi(self)
        self.UIcomponents()
        # self.populateComboProv()
        # self.populateComboMcpo(self.prov_combo.currentData())
        # self.setLineFormatValidator()
        # self.setStyleLines()

    def UIcomponents(self):
        icons_path = self.utils.iconsPath()

        dataParcela = self.dataAutoParcela()
        listaParcela = [e[0] for e in dataParcela]
        # print(listaParcela)
        completerParcela = QCompleter(listaParcela)
        completerParcela.setCaseSensitivity(False)

        dataSegmento = self.dataAutoSegmento()
        listaSegmento = [e[0] for e in dataSegmento]
        completerSegmento = QCompleter(listaSegmento)
        completerSegmento.setCaseSensitivity(False)

        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        # columna geometria lote parcela
        # self.tableWidget.setColumnHidden(6, True) # columna geometria loteparcela
        self.tableWidget.setColumnHidden(0, True)  # columna id lote parcela

        self.tableWidget.doubleClicked.connect(self.doubleClick)

        self.tableWidget_2.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_2.setColumnHidden(0, True)
        self.tableWidget_2.setColumnHidden(1, True)
        self.tableWidget_2.setColumnHidden(3, True)

        delegate = ReadOnlyDelegate(self.tableWidget_2)
        self.tableWidget_2.setItemDelegateForColumn(0, delegate)
        self.tableWidget_2.setItemDelegateForColumn(1, delegate)
        self.tableWidget_2.setItemDelegateForColumn(2, delegate)
        self.tableWidget_2.setItemDelegateForColumn(3, delegate)
        self.tableWidget_2.setItemDelegateForColumn(4, delegate)
        self.tableWidget_2.setItemDelegateForColumn(5, delegate)
        self.tableWidget_2.setItemDelegateForColumn(6, delegate)
        self.tableWidget_2.setItemDelegateForColumn(7, delegate)

        self.line_buscar.setClearButtonEnabled(True)
        line_buscar_action = self.line_buscar.addAction(
                    QIcon(icons_path['search_icon_path']), self.line_buscar.TrailingPosition)
        line_buscar_action.triggered.connect(self.buscarLotes)
        

        self.btn_add_layer.setIcon(QIcon(icons_path['add_layer_to_map']))
        self.btn_add_layer.setIconSize(QtCore.QSize(20, 20))
        self.btn_add_layer.clicked.connect(self.cargarLote)

        self.btn_reload.setIcon(QIcon(icons_path['reload_data']))
        self.btn_reload.setIconSize(QtCore.QSize(20, 20))
        self.btn_reload.setToolTip('Buscar todos los lotes')
        self.btn_reload.clicked.connect(self.reloadLotes)

        self.btn_chart.clicked.connect(self.analiticaDialog)
        self.btn_chart.setIcon(QIcon(icons_path['chart']))
        self.btn_chart.setIconSize(QtCore.QSize(20, 20))
        self.btn_chart.setToolTip('Abrir Panel Analisis')

        self.btn_add_segmento.setIcon(QIcon(icons_path['add_layer_to_map']))
        self.btn_add_segmento.setToolTip('Agregar Segmento al Mapa')
        self.btn_add_segmento.setIconSize(QtCore.QSize(20, 20))
        self.btn_add_segmento.clicked.connect(self.cargarSegmentosLote)

        # self.prov_combo.currentTextChanged.connect(self.indexProvUpdate)
        self.setStyleSheet(self.style)
        self.line_buscar.setCompleter(completerParcela)
        self.line_find_segmento.setCompleter(completerSegmento)
        
        self.pushButton_3.clicked.connect(self.crearAmbientes)
        self.pushButton_4.clicked.connect(self.segmentoDialog)
        self.btn_find_segmento.clicked.connect(self.buscarSegmento)

        self.btn_add_lotes.clicked.connect(self.addLotesMap)
        self.btn_add_parcelas.clicked.connect(self.addParcelasMap)
        self.btn_add_segmentos.clicked.connect(self.addSegmentosMap)
        self.btn_cod_segmento.setIcon(QIcon(icons_path['pen-to-square']))
        self.btn_cod_segmento.setIconSize(QtCore.QSize(20, 20))
        self.btn_cod_segmento.setToolTip('Asignar Codigo a segmento')
        self.btn_cod_segmento.clicked.connect(self.codificarSegmento)
        self.btn_reporte.setIcon(QIcon(icons_path['export-csv']))
        self.btn_reporte.setIconSize(QtCore.QSize(20, 20))
        self.btn_reporte.setToolTip('Generar Reporte')
        self.btn_reporte.clicked.connect(self.crearReporte)
    
        


        
        self.sinceDate.setDate(QDate.currentDate())
        self.untilDate.setDate(QDate.currentDate())
        self.sinceDate.dateChanged.connect(self.sinceDateChange)

        # self.lote_dateSiembra.setDate(QDate.currentDate())
        # self.lote_dateCosecha.setDate(QDate.currentDate())
        # self.lote_dateSiembra.dateChanged.connect(self.siembraDateChange)





        self.an_load_btn.setIcon(QIcon(icons_path['import']))
        self.an_load_btn.setIconSize(QtCore.QSize(20, 20))
        self.an_load_btn.setToolTip('Importar Analitica')
        self.an_load_btn.clicked.connect(self.cargarAnalitica)
        
        self.an_save_bd.setIcon(QIcon(icons_path['upload-to-db']))
        self.an_save_bd.setIconSize(QtCore.QSize(20, 20))
        self.an_save_bd.setToolTip('Guardar en BD')
        self.an_save_bd.clicked.connect(self.crearAnalitica)
        
        self.an_params.setIcon(QIcon(icons_path['settings']))
        self.an_params.setIconSize(QtCore.QSize(20, 20))
        self.an_params.setToolTip('Parametros Analiticos')
        self.an_params.clicked.connect(self.paramsDialog)

        
        self.lbl_lastCode.setText(self.lastCode)

        self.tableWidget_3.setColumnHidden(0, True)
        self.tableWidget_3.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.tableWidget_4.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)

        # self.seg_combo.currentIndexChanged.connect(self.onChangeComboSemento)

        # self.cmb_regimen.currentIndexChanged.connect(self.validarNombre)
        # for i in range(0,9):
        #     self.tableWidget_3.setColumnWidth(i, 86)


            

    def doubleClick(self,e):
        print(e)

        


    def closeEvent(self, event):
        self.closingPlugin.emit()
        # self.tableWidget_3.setRowCount(0)
        event.accept()

    def dataAutoParcela(self): 
        cursor = self.conn.cursor()
        sql = '''select distinct unnest(array[l.nombre, p.nombre, c.nombre]) from lote l
        left join lotecampania lc on lc.idlote = l.idlote
        left join campania ca on ca.idcampania = lc.idcampania 
        left join loteparcela lp on lc.idlotecampania = lp.idlotecampania 
        left join parcela p on lp.idparcela = p.idparcela
        left join cultivo c on c.idcultivo = ca.idcultivo'''
        cursor.execute(sql)
        data = cursor.fetchall()
        return data
    def dataAutoSegmento(self): 
        cursor = self.conn.cursor()
        sql = '''select distinct unnest(array[s.cod_control, l.nombre, a.cod_analisis]) lista from segmento s
            join lote l on s.idlote = l.idlote 
            left join segmentoanalisis sa on s.idsegmento = sa.idsegmento
            left join analisis a on a.idanalisis = sa.idanalisis
            order by lista '''
        # cursor.execute(sql)
        # data = cursor.fetchall()
        data = []
        return data
    def actualizarParcela(self):
        idParcela = self.lbl_id_parcela.text()
        name = self.ln_par_nombre.text()
        prov = int(self.prov_combo.currentData())
        mcpo = int(self.mcpo_combo.currentData())
        aggregate = self.ln_par_agg.text()
        zone = self.ln_par_zona.text()
        poly = self.ln_par_poly.text()
        allotment = self.ln_par_parcela.text()
        inclosure = self.ln_par_recinto.text()
        confirm = QMessageBox.question(self, 'aGrae GIS', f"Seguro quiere Actualizar la parcela:\n--- ID: {idParcela}\n--- Nombre: {name.upper()}?", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if confirm == QMessageBox.Yes:
            with self.conn as conn:
                try:
                    # sql = f'''update parcela set nombre = '{name}', provincia = {prov}, municipio = {mcpo}, agregado = '{aggregate}', zona = '{zone}', poligono = '{poly}', parcela = '{allotment}', recinto = '{inclosure}' where idparcela = '{idParcela}' '''               
                    sql = f'''update parcela set nombre = '{name}', provincia = {prov}, municipio = {mcpo}  where idparcela = '{idParcela}' '''  # ! SENTENCIA TEMPORAL
                    cursor = conn.cursor()
                    cursor.execute(sql)
                    conn.commit()
                    QMessageBox.about(self, f"aGrae GIS:",f"Parcela *-- {name} --* Se modifico Correctamente.")
                    self.btn_par_update.setEnabled(False)
                except Exception as ex:
                    QMessageBox.about(self, f"Error:",f"{ex} \nHa ocurrido un Error por favor, verifique los datos o contacese con soporte tecnico")
        else:
            pass
    def actualizarLote(self):
        idlote = self.idlote
        nombre = self.line_lote_nombre.text()
        idexp = self.line_lote_idexp.text()
        idcult = self.line_lote_idcultivo.text()
        dateSiembra = self.lote_dateSiembra.date().toString('yyyy.MM.dd')
        dateCosecha = self.lote_dateCosecha.date().toString('yyyy.MM.dd')
        dateFondo = self.date_fondo.date().toString('yyyy.MM.dd')
        fondoFormula = self.line_fondo_formula.text()
        fondoPrecio = float(self.line_fondo_precio.text())
        fondoCalculado = float(self.line_fondo_calculado.text())
        fondoAjustado = float(self.line_fondo_ajustado.text())
        fondoAplicado = float(self.line_fondo_aplicado.text())
        dateCob1 = self.date_cob.date().toString('yyyy.MM.dd')
        cob1Formula = self.line_cob_formula.text()
        cob1Precio = float(self.line_cob_precio.text())
        cob1Calculado = float(self.line_cob_calculado.text())
        cob1Ajustado = float(self.line_cob_ajustado.text())
        cob1Aplicado = float(self.line_cob_aplicado.text())
        dateCob2 = self.date_cob_2.date().toString('yyyy.MM.dd')
        cob2Formula = self.line_cob_formula_2.text()
        cob2Precio = float(self.line_cob_precio_2.text())
        cob2Calculado = float(self.line_cob_calculado_2.text())
        cob2Ajustado = float(self.line_cob_ajustado_2.text())
        cob2Aplicado = float(self.line_cob_aplicado_2.text())
        dateCob3 = self.date_cob_3.date().toString('yyyy.MM.dd')
        cob3Formula = self.line_cob_formula_3.text()
        cob3Precio = float(self.line_cob_precio_3.text())
        cob3Calculado = float(self.line_cob_calculado_3.text())
        cob3Ajustado = float(self.line_cob_ajustado_3.text())
        cob3Aplicado = float(self.line_cob_aplicado_3.text())
        confirm = QMessageBox.question(self, 'aGrae GIS', f"Seguro quiere Actualizar el Lote:\n--- ID: {idlote}\n--- Nombre: {nombre.upper()}?", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if confirm == QMessageBox.Yes:
            try:             
                sql = f'''update lote set  idexplotacion = '{idexp}', idcultivo = '{idcult}', nombre = '{nombre}',fechasiembra = '{dateSiembra}',fechacosecha = '{dateCosecha}',fechafertilizacionfondo = '{dateFondo}',    fertilizantefondoformula = '{fondoFormula}',fertilizantefondoprecio = {fondoPrecio}, fertilizantefondocalculado = {fondoCalculado},fertilizantefondoajustado = {fondoAjustado},  fertilizantefondoaplicado = {fondoAplicado},fechafertilizacioncbo1 = '{dateCob1}', fertilizantecob1formula ='{cob1Formula}',fertilizantecob1precio = {cob1Precio}, fertilizantecob1calculado = {cob1Calculado},fertilizantecob1ajustado = {cob1Ajustado}, fertilizantecob1aplicado = {cob1Aplicado},fechafertilizacioncbo2 = '{dateCob2}', fertilizantecob2formula = '{cob2Formula}', fertilizantecob2precio = {cob2Precio},  fertilizantecob2calculado = {cob2Calculado}, fertilizantecob2ajustado = {cob2Ajustado}, fertilizantecob2aplicado ={cob2Aplicado},fechafertilizacioncbo3 = '{dateCob3}', fertilizantecob3formula = '{cob3Formula}',fertilizantecob3precio = {cob3Precio}, fertilizantecob3calculado = {cob3Calculado},fertilizantecob3ajustado = {cob3Ajustado}, fertilizantecob3aplicado = {cob3Aplicado} where idlote = {idlote} '''
                # print(sql)      
                conn = self.conn
                cursor = conn.cursor()
                cursor.execute(sql)
                conn.commit()
                QMessageBox.about(self, f"aGrae GIS:",f"Lote *-- {nombre.upper()} --* Se modifico Correctamente.")
            except Exception as e: 
                # cursor.rollback()
                QMessageBox.about(self,'aGrae GIS:',f'Ocurrio un Error. \n {e}')

        else:
            pass  
    def crearParcela(self):
        self.tools.crearParcela(self)
    def crearCampania(self):
        # try: 
        self.tools.crearCampania(self)
        self.btn_crear_campania.setEnabled(False)
        self.btn_crear_lote.setEnabled(True)
        self.line_lote_nombre.setReadOnly(False)
        self.line_lote_nombre.setText('')

        # except Exception as ex: 
        #     print(ex)
        #     exc_type, exc_obj, exc_tb = sys.exc_info()
        #     fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        #     print(exc_type, fname, exc_tb.tb_lineno)
        #     pass           
    
    def crearLote(self):
        try: 
            self.tools.crearLote(self)
            self.btn_crear_campania.setEnabled(True)
            self.btn_crear_lote.setEnabled(False)
            self.line_lote_nombre.setReadOnly(True)

        except Exception as ex:
            print(ex)
            pass
        
    def populateParcela(self,data):
        style = "font-weight: bold ; color : red"
        dataStr = [str(e) for e in data]
        self.lbl_id_parcela.setText(dataStr[12])
        self.ln_par_nombre.setText(dataStr[2])
        # self.ln_par_provincia.setText(dataStr[3])            
        # if dataStr[11] != None:
        idxProv = self.prov_combo.findData(dataStr[3])
        self.prov_combo.setCurrentIndex(idxProv)           
        idxMcpo = self.mcpo_combo.findData(dataStr[4])
        self.mcpo_combo.setCurrentIndex(idxMcpo)
        # self.ln_par_mcpo.setText(dataStr[3])
        self.ln_par_agg.setText(dataStr[5])
        self.ln_par_zona.setText(dataStr[6])
        self.ln_par_poly.setText(dataStr[7])
        self.ln_par_parcela.setText(dataStr[8])
        self.ln_par_recinto.setText(dataStr[9])
        self.btn_par_create.setEnabled(False)
        self.btn_par_update.setEnabled(True)
        self.pushButton.setEnabled(True)

    def populateLote(self, data):
        # print(data)
        self.resetStyleLabels()
        data2 = []
        style = "font-weight: bold ; color : red"
        for e in data:
            if e == None:
                data2.append(e)
            else:
                data2.append(str(e))
        if len(data) == 1: 
            self.line_lote_nombre.setText(data[0])
        else: 
            try:
                self.idlote = data[0]
                # self.lbl_id_lote.setText(data2[0])
                self.line_lote_idexp.setText(data2[1])
                self.line_lote_idcultivo.setText(data2[2])
                self.line_lote_nombre.setText(data2[3])
                try:
                    self.lote_dateSiembra.setDate(data[4])
                except:
                    self.label_5.setStyleSheet(style)              
                try:
                    self.lote_dateCosecha.setDate(data[5])
                except:
                    self.label_6.setStyleSheet(style)
                    pass
                try:
                    self.lote_dateFondo.setDate(data[6])
                except:
                    self.label_13.setStyleSheet(style)
                    pass
                self.line_fondo_formula.setText(data2[7])
                self.line_fondo_precio.setText(data2[8])
                self.line_fondo_calculado.setText(data2[9])
                self.line_fondo_ajustado.setText(data2[10])
                self.line_fondo_aplicado.setText(data2[11])
                try:
                    self.date_cob.setDate(data[12])
                except:
                    self.label_15.setStyleSheet(style)
                    pass
                self.line_cob_formula.setText(data2[13])
                self.line_cob_precio.setText(data2[14])
                self.line_cob_calculado.setText(data2[15])
                self.line_cob_ajustado.setText(data2[16])
                self.line_cob_aplicado.setText(data2[17])
                try:
                    self.date_cob_2.setDate(data[18])
                except:
                    self.label_20.setStyleSheet(style)
                    pass
                self.line_cob_formula_2.setText(data2[19])
                self.line_cob_precio_2.setText(data2[20])
                self.line_cob_calculado_2.setText(data2[21])
                self.line_cob_ajustado_2.setText(data2[22])
                self.line_cob_aplicado_2.setText(data2[23])
                try:
                    self.date_cob_3.setDate(data[24])
                except:
                    self.label_26.setStyleSheet(style)
                    pass
                self.line_cob_formula_3.setText(data2[25])
                self.line_cob_precio_3.setText(data2[26])
                self.line_cob_calculado_3.setText(data2[27])
                self.line_cob_ajustado_3.setText(data2[28])
                self.line_cob_aplicado_3.setText(data2[29])
                self.btn_lote_update.setEnabled(True)
                # self.btn_crear_campania.setEnabled(True)
                # self.line_lote_nombre.setEnabled()
            except Exception as ex:
                print(ex)
                pass


    def returnIdParcela(self,param):
        self.idParcela = param
        # print(self.sqlParcela)
    def returnSqlParcela(self,sql): 
        self.sqlParcela = sql

    def parcelaDialog(self):       

        dialog = parcelaFindDialog()
        dialog.loadData()
        dialog.actualizar.connect(self.populateParcela)
        dialog.sqlSignal.connect(self.returnSqlParcela)
        dialog.idParcelaSignal.connect(self.returnIdParcela)

        dialog.exec_()
    
    def loteDialog(self):     
        dialog = loteFindDialog()
        dialog.loadData()
        dialog.pushButton_2.setEnabled(False)
        dialog.pushButton_3.setEnabled(False)
        dialog.actualizar.connect(self.populateLote)
        dialog.exec_()  

    def expDialog(self):
        dialog = expFindDialog()
        dialog.loadData()
        dialog.getIdExp.connect(self.popIdExp)
        dialog.exec_()
    
    def popIdExp(self, value):

        self.line_lote_idexp.setText(f'{value}')

    def cultivoDialog(self):
        dialog = cultivoFindDialog()
        dialog.loadData()
        dialog.getIdCultivo.connect(self.popIdCultivo)
        dialog.exec_()

    def popIdCultivo(self,value):
        
        self.line_lote_idcultivo.setText(f'{value}')

    def resetStyleLabels(self):
        style = 'font-weight: normal ; color : black'
        self.label_5.setStyleSheet(style)
        self.label_6.setStyleSheet(style)
        self.label_13.setStyleSheet(style)
        self.label_15.setStyleSheet(style)
        self.label_20.setStyleSheet(style)
        self.label_26.setStyleSheet(style)


    def setLineFormatValidator(self):
        self.doubleFormat = QRegExpValidator(QRegExp(r'^[0-9]\d*(\.\d+)?$'))
        self.line_fondo_precio.setValidator(self.doubleFormat)
        self.line_fondo_calculado.setValidator(self.doubleFormat)
        self.line_fondo_ajustado.setValidator(self.doubleFormat)
        self.line_fondo_aplicado.setValidator(self.doubleFormat)
        self.line_cob_precio.setValidator(self.doubleFormat)
        self.line_cob_calculado.setValidator(self.doubleFormat)
        self.line_cob_ajustado.setValidator(self.doubleFormat)
        self.line_cob_aplicado.setValidator(self.doubleFormat)
        self.line_cob_precio_2.setValidator(self.doubleFormat)
        self.line_cob_calculado_2.setValidator(self.doubleFormat)
        self.line_cob_ajustado_2.setValidator(self.doubleFormat)
        self.line_cob_aplicado_2.setValidator(self.doubleFormat)
        self.line_cob_precio_3.setValidator(self.doubleFormat)
        self.line_cob_calculado_3.setValidator(self.doubleFormat)
        self.line_cob_ajustado_3.setValidator(self.doubleFormat)
        self.line_cob_aplicado_3.setValidator(self.doubleFormat)

        ###########################################################

        self.integerFormat = QRegExpValidator(QRegExp(r'^[0-9]\d*$'))
        self.ln_par_agg.setValidator(self.integerFormat)
        self.ln_par_zona.setValidator(self.integerFormat)
        self.ln_par_poly.setValidator(self.integerFormat)
        self.ln_par_parcela.setValidator(self.integerFormat)
        self.ln_par_recinto.setValidator(self.integerFormat)
        self.line_lote_idexp.setValidator(self.integerFormat)
        self.line_lote_idcultivo.setValidator(self.integerFormat)

        ##############################################################
       


    def validarNombre(self,i):
                
        if self.line_lote_nombre.text() != '' : 
            self.btn_crear_lote.setEnabled(True)
        else: 
            self.btn_crear_lote.setEnabled(False)

        if self.line_lote_idexp.text() != '' and self.line_lote_idcultivo.text() != '' and self.line_lote_nombre.text() != '':
            self.btn_crear_campania.setEnabled(True)
        else: 
            self.btn_crear_campania.setEnabled(False)

    def setStyleLines(self):
        style = ''' color: black ; font-weight: bold  '''
        self.ln_par_nombre.setStyleSheet(style)
        self.ln_par_agg.setStyleSheet(style)
        self.ln_par_zona.setStyleSheet(style)
        self.ln_par_poly.setStyleSheet(style)
        self.ln_par_parcela.setStyleSheet(style)
        self.ln_par_recinto.setStyleSheet(style)
        self.line_lote_nombre.setStyleSheet(style)
        self.line_lote_idexp.setStyleSheet(style)
        self.line_lote_idcultivo.setStyleSheet(style)
        self.line_fondo_formula.setStyleSheet(style)
        self.line_fondo_precio.setStyleSheet(style)
        self.line_fondo_calculado.setStyleSheet(style)
        self.line_fondo_ajustado.setStyleSheet(style)
        self.line_fondo_aplicado.setStyleSheet(style)
        self.line_cob_formula.setStyleSheet(style)
        self.line_cob_precio.setStyleSheet(style)
        self.line_cob_calculado.setStyleSheet(style)
        self.line_cob_ajustado.setStyleSheet(style)
        self.line_cob_aplicado.setStyleSheet(style)
        self.line_cob_formula_2.setStyleSheet(style)
        self.line_cob_precio_2.setStyleSheet(style)
        self.line_cob_calculado_2.setStyleSheet(style)
        self.line_cob_ajustado_2.setStyleSheet(style)
        self.line_cob_aplicado_2.setStyleSheet(style)
        self.line_cob_formula_3.setStyleSheet(style)
        self.line_cob_precio_3.setStyleSheet(style)
        self.line_cob_calculado_3.setStyleSheet(style)
        self.line_cob_ajustado_3.setStyleSheet(style)
        self.line_cob_aplicado_3.setStyleSheet(style)

    def populateComboProv(self): 
        conn = self.conn
        cursor = conn.cursor(cursor_factory = extras.RealDictCursor)
        cursor.execute('select nombre,idprovincia from datos.provincia order by nombre')
        datos = cursor.fetchall()
        for row in datos: 
            self.prov_combo.addItem(row["nombre"],row["idprovincia"])        
        self.prov_combo.setStyleSheet("QComboBox { combobox-popup: 0; font-size: 10pt}")
    def indexProvUpdate(self):
        idprov = str(self.prov_combo.currentData())
        # print(idprov)
        self.mcpo_combo.clear()
        self.populateComboMcpo(idprov)   
    def populateComboMcpo(self,idprov):
        self.mcpo_combo.setStyleSheet("QComboBox { combobox-popup: 0; }")
        conn = self.conn
        try:
            cursor = conn.cursor(cursor_factory = extras.RealDictCursor)
            cursor.execute(f'''select nombre,idmunicipio from datos.municipio where idprovincia = '{idprov}' order by nombre ''')
            datos = cursor.fetchall()
            for row in datos:
                self.mcpo_combo.addItem(row["nombre"], row["idmunicipio"])        
        except errors.lookup('22P02'):
            #  print('error')
             conn.rollback()
             pass

    def crearAmbientes(self):
        print('test')
        self.tools.crearAmbientes(self)

    def crearSegmentos(self):
        self.tools.crearSegmentos(self)

    def cargarParcela(self):
        idsigpac = self.lbl_id_parcela.text()
        self.tools.cargarParcela(self,idsigpac)

    def segmentoDialog(self):
        dialog = agraeSegmentoDialog()
        dialog.exec_() 

    def paramsDialog(self): 
        dialog = agraeParametrosDialog()
        dialog.exec_() 
    def buscarSegmento(self):

        # print('prueba buscar segmento')
        param = self.line_find_segmento.text()
        sql = self.utils.segmentosQueryTable(str(param))
        # sql = 'select * from lotes'
        self.sqlSegmento = sql
        
        try: 
            with self.conn as conn: 
                cursor = conn.cursor() 
                cursor.execute(sql)
                data = cursor.fetchall() 
                # print(data)
                a = len(data)
                b = len(data[0])
                i = 1
                j = 1
                self.tableWidget_2.setRowCount(a)
                self.tableWidget_2.setColumnCount(b)
                for j in range(a):
                    for i in range(b):
                        item = QTableWidgetItem(str(data[j][i]))
                        self.tableWidget_2.setItem(j,i,item)
                
                # self.btn_add_layer_2.setEnabled(True)
        
        except Exception as ex:
            print(ex)

    def codificarSegmento(self): 
        row = self.tableWidget_2.currentRow()
        idsegmento = self.tableWidget_2.item(row,0).text()
        idlotecampania = self.tableWidget_2.item(row,1).text()
        codigo = self.tableWidget_2.item(row,8).text()
        regimen = self.tableWidget_2.item(row,3).text()

        idx = self.tableWidget_2.selectionModel().selectedRows()
        if len(idx) > 0:
            for i in sorted(idx):
                    idsegmento = self.tableWidget_2.item(i.row(), 0).text()
                    idlotecampania = self.tableWidget_2.item(i.row(), 1).text()
                    codigo = self.tableWidget_2.item(i.row(),8).text()
                    regimen = self.tableWidget_2.item(i.row(),3).text()        
                    sql = "insert into segmentoanalisis (idsegmento,idlotecampania,codigo,regimen) values ({},{},'{}',{})".format(idsegmento,idlotecampania,codigo,regimen)
                    with self.conn as conn: 
                        try: 
                            cursor = conn.cursor()
                            cursor.execute(sql)
                            conn.commit()
                            self.lastCode = self.tools.lastCode()
                            print("Codigo creado correctamente")
                            self.lbl_lastCode.setText(self.lastCode)
                        except Exception as ex:
                            print("{}".format(ex))
                            conn.rollback()




        # self.tools.asignarCodigoSegmento(self)
        # print("{}-{}".format(idsegmento,idlotecampania))
    
    def crearReporte(self): 
        # print('Crear Reporte')
        idx = self.tableWidget_2.selectionModel().selectedRows()
        header = []
        data = []
        # print(len(idx))
        if len(idx) >0: 
            reporte_path = self.saveFileDialog()
            if reporte_path != False: 
                with open(os.path.join(os.path.dirname(__file__), 'tools/reporte.csv'),'r',newline='') as base: 
                    csv_reader = csv.reader(base,delimiter=';')
                    header = next(csv_reader)
                with open(reporte_path,'w',newline='') as file:
                    csv_writer = csv.writer(file,delimiter=';')          
                    csv_writer.writerow(header)
                    for i in sorted(idx):
                        idsegmento = self.tableWidget_2.item(i.row(), 0).text()
                        idlotecampania = self.tableWidget_2.item(i.row(), 1).text()

                        with self.conn:
                            select = "select idsegmentoanalisis, codigo, regimen from segmentoanalisis where idsegmento = {} and idlotecampania = {}".format(
                                idsegmento, idlotecampania)
                            cursor = self.conn.cursor() 
                            cursor.execute(select)
                            data = [r for r in list(cursor.fetchall())]
                            # print(data)
                    
                        csv_writer.writerows(data)
                    self.utils.msgBar('Archivo Creado Correctamente <a href="{}">{}</a>'.format(reporte_path,reporte_path),3,10)
            else:            
                QMessageBox.about(self, 'aGrae GIS', 'La ruta ingresada no es valida')
                # print(data)
                # print("{}-{}-{}".format(data[0],idsegmento,idlotecampania))
        else: 
            print('Debe Seleccionar al menos un segmento')

    def cargarSegmentosLote(self): 
        print('ok')
        dns = self.dns
        row = self.tableWidget_2.currentRow()
        idlotecampania = self.tableWidget_2.item(row, 1).text()
        lote = self.tableWidget_2.item(row, 2).text()
        cultivo = self.tableWidget_2.item(row, 6).text()
        exp = f''' "idlotecampania" = {idlotecampania} '''
        uri = QgsDataSourceUri()
        uri.setConnection(dns['host'], dns['port'],
                          dns['dbname'], dns['user'], dns['password'])
        uri.setDataSource('public', 'segmentos', 'geometria', exp, 'id')
        nombreCapa = f'Segmentos Lote {lote}-{cultivo}'
        layer = QgsVectorLayer(uri.uri(False), nombreCapa, 'postgres')
        if layer is not None and layer.isValid():
            QgsProject.instance().addMapLayer(layer)
            iface.setActiveLayer(layer)
            iface.zoomToActiveLayer()

    def sinceDateChange(self):
        # print(self.sinceDate.date().toString())
        self.sinceDateStatus = True
        d1 = self.sinceDate.date()
        self.untilDate.setMinimumDate(d1)
        self.untilDate.setDate(d1)
        self.untilDate.setEnabled(True)
    
    def siembraDateChange(self):

        d1 = self.lote_dateSiembra.date()
        self.lote_dateCosecha.setMinimumDate(d1)
        self.lote_dateCosecha.setDate(d1)

    def buscarLotes(self):
        self.tools.buscarLotes(self, self.sinceDateStatus)
        self.line_buscar.setText('')

    def reloadLotes(self):
        self.tools.buscarLotes(self, False)
        self.btn_reload.setEnabled(False)

    def cargarLote(self):
        dns = self.dns
        row = self.tableWidget.currentRow()
        idlotecampania = self.tableWidget.item(row, 0).text()
        loteNombre = self.tableWidget.item(row, 1).text()
        parcela = self.tableWidget.item(row, 2).text()
        cultivo = self.tableWidget.item(row, 5).text()
        sql = f'''select p.idparcela from parcela p, lotes ls
            where st_within(p.geometria,ls.geometria) and ls.idlotecampania = {idlotecampania}
            '''

        cursor = self.conn.cursor() 
        cursor.execute(sql)
        data = cursor.fetchall()
        s = ",".join([str(e[0]) for e in data])
        # print(s) 
        exp = f''' "idparcela" in ({s}) ''' # print(exp)

        uriSegmentos = QgsDataSourceUri()
        uriSegmentos.setConnection(dns['host'], dns['port'],
                          dns['dbname'], dns['user'], dns['password'])
        uriSegmentos.setDataSource(
            'public', 'segmentos', 'geometria', f'"idlotecampania" = {idlotecampania}', 'id')
        lyrSegmentos = QgsVectorLayer(uriSegmentos.uri(
            False), f'''SEGMENTOS {loteNombre}-{cultivo}''', 'postgres')
        
        uriAmbientes = QgsDataSourceUri() 
        uriAmbientes.setConnection(dns['host'], dns['port'],
                                   dns['dbname'], dns['user'], dns['password'])
        uriAmbientes.setDataSource(
            'public', 'ambientes', 'geometria', f'"idlotecampania" = {idlotecampania}', 'id')
        lyrAmbientes = QgsVectorLayer(uriAmbientes.uri(
            False), f'''AMBIENTES {loteNombre}-{cultivo}''', 'postgres')
        

        uriParcelas = QgsDataSourceUri()
        uriParcelas.setConnection(dns['host'], dns['port'],
                                  dns['dbname'], dns['user'], dns['password'])
        uriParcelas.setDataSource(
            'public', 'parcela', 'geometria', exp, 'idparcela')
        lyrParcelas = QgsVectorLayer(uriParcelas.uri(
            False), f'{parcela}-{loteNombre}-{cultivo}', 'postgres')

        uriUnidades = QgsDataSourceUri() 
        uriUnidades.setConnection(dns['host'], dns['port'],
                                   dns['dbname'], dns['user'], dns['password'])
        uriUnidades.setDataSource(
            'public', 'unidades', 'geometria', f'"idlotecampania" = {idlotecampania}', 'id')
        lyrUnidades = QgsVectorLayer(uriUnidades.uri(
            False), f'''UNIDADES {loteNombre}-{cultivo}''', 'postgres')
        
        QgsProject.instance().addMapLayer(lyrUnidades)
        QgsProject.instance().addMapLayer(lyrAmbientes)
        QgsProject.instance().addMapLayer(lyrSegmentos)
        QgsProject.instance().addMapLayer(lyrParcelas)
        self.tools.cargarLote(self)
        


    def addLotesMap(self):
        sql = f'select * from lotes'
        nombre = 'aGrae Lotes'
        self.tools.addMapLayer('lotes',nombre,id='id')

    def addSegmentosMap(self): 
        self.tools.addMapLayer('segmentos','aGrae Segmentos',id='id')
    def addParcelasMap(self):
        sql = f'select * from parcela'
        nombre = 'aGrae Parcelas'
        # self.tools.addMapLayer(sql, nombre,'idparcela')
        self.tools.addMapLayer('parcela',nombre)
    def heavyTask(self): 
        self.thread = QThread()
        self.worker = Worker()
        self.worker.moveToThread(self.thread)
        self.thread.started.connect(self.worker.addLotesMap)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater) 
        self.thread.finished.connect(self.thread.deleteLater)
        self.thread.start()
        self.btn_add_lotes.setEnabled(False)
        self.btn_add_lotes.setText('Cargando')
        self.thread.finished.connect(lambda: self.btn_add_lotes.setEnabled(True))
        self.thread.finished.connect(lambda: self.btn_add_lotes.setText('Agregar Lotes'))
    
    def cargarAnalitica(self): 
        print('Cargando Analitica')
        
       
        reporte_path = self.openFileDialog() 
        if reporte_path != False: 
            self.tableWidget_3.setRowCount(0)
            self.an_lbl_file.setText(reporte_path)
           
            df = pd.read_csv(reporte_path, delimiter=';')
            df = df.astype(object).replace(np.nan, '')
            try: 
                columns = [c for c in df.columns]
                data = [[row['id'],row['COD'],row['N'],row['P'],row['K'],row['pH'],row['CE'],row['CARBON'], row['ceap'],row['CALIZA'],row['CA'],row['MG'],row['NA'],row['ORGANI']] for index,row in df.iterrows()]
                a = len(data)
                b = len(data[0])
                i = 1
                j = 1
            
                self.tableWidget_3.setRowCount(a)
                self.tableWidget_3.setColumnCount(b)
                for j in range(a):
                    for i in range(b):
                        item = QTableWidgetItem(str(data[j][i]))
                        self.tableWidget_3.setItem(j, i, item)
                self.an_save_bd.setEnabled(True)    
                self.an_params.setEnabled(True)
                self.seg_combo.clear()
                self.onChangeTableData()
                self.populateComboSegmento()
            except KeyError as ke: 
                print('{}'.format(ke))
                QMessageBox.about(self, 'aGrae GIS', 'El archivo no cumple con el formato establecido.\nIntenta Nuevamente. ')
            
                
           
        else: 
            pass

    def crearAnalitica(self):        
        file_path = str(self.an_lbl_file.text())        
        df = pd.read_csv(file_path,delimiter=';')
        df1 = df.astype(object).replace(np.nan, 'NULL')
        columns = [c for c in df.columns]
        # print(columns)   
        with self.conn: 
            cursor = self.conn.cursor()
            try:                
                for index, row in df1.iterrows():
                    try: 
                        _SQL = f'''INSERT INTO analisis.analitica (idsegmentoanalisis,ceap,ph,ce,carbon,caliza,ca,mg,k,na,n,p,organi,al,b,fe,mn,cu,zn,s,mo,arcilla,limo,arena,ni,co,ti,"as",pb,cr,metodo) VALUES ({row['id']},{row['ceap']},{row['pH']},{row['CE']},{row['CARBON']},{row['CALIZA']},{row['CA']},{row['MG']},{row['K']},{row['NA']},{row['N']},{row['P']},{row['ORGANI']},{row['AL']},{row['B']},{row['FE']},{row['MN']},{row['CU']},{row['ZN']},{row['S']},{row['MO']},{row['ARCILLA']},{row['LIMO']},{row['ARENA']},{row['NI']},{row['CO']},{row['TI']},{row['AS']},{row['PB']},{row['CR']},{row['METODO_P']}); '''

                        # print(_SQL)   
                        cursor.execute(_SQL)
                        self.conn.commit()  
                    except errors.lookup('23505'):
                        QMessageBox.about(self, 'aGrae GIS','El analisis: {} con codigo: {} ya existe en la base de datos.\nComprueba la informacion'.format(row['id'],row['COD']))
                        self.conn.rollback()
                        pass                        
                self.an_save_bd.setEnabled(False)
                self.utils.msgBar('Analitica cargada correctamente',0,5)
            except Exception as ex:
                print(ex)

    def openFileDialog(self): 
        options = QFileDialog.Options()
        # options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(
            self, "aGrae GIS", "", "Todos los archivos (*);;Archivos separados por coma (*.csv)", options=options)
        if fileName:
            print(fileName)
            return fileName
        else: 
            return False

    def saveFileDialog(self):
        options = QFileDialog.Options()
        fileName, _ = QFileDialog.getSaveFileName(None,"aGrae GIS","","Archivos separados por coma (*.csv)", options=options)
        if fileName:
            # print(fileName[0])
            return fileName
        else: 
            return False

    def populateComboSegmento(self):
        self.seg_combo.setStyleSheet("QComboBox { combobox-popup: 0; }")
        rowCount = self.tableWidget_3.rowCount()
        # print('PRELOAD TEST')
        for r in range(rowCount): 
            # print(self.tableWidget_3.item(r,0).text())
            if len(self.tableWidget_3.item(r, 1).text()) > 0:
                self.seg_combo.addItem(self.tableWidget_3.item(r, 1).text(),r)

    def onChangeComboSemento(self,i): 
        # print("comboSegmento: Row {} Cod {}".format(self.seg_combo.itemData(),i)
        self.precalculo(i)
        pass
    
    def precalculo(self,i):
        try:
            organi = float(self.tableWidget_3.item(i, 13).text())
            cox = organi / 1.32  # ! CONSTANTE 1.32 COX
            self.cox_lbl.setText('{} %'.format(round((cox*100), 5)))
            N = float(self.tableWidget_3.item(i, 2).text())
            rel_cn = cox / N * 100  # ! VALOR ADIMENSIONAL
            self.rel_cn_lbl.setText('{}'.format(round((rel_cn), 5)))
            CA = float(self.tableWidget_3.item(i, 10).text())
            CA_eq = CA / 200  # ! CONSTANTE 200 CA_EQ
            self.ca_eq_lbl.setText('{} meq/100g'.format(round((CA_eq), 5)))
            MG = float(self.tableWidget_3.item(i, 11).text())
            MG_eq = MG / 120  # ! CONSTANTE 120 MG_EQ
            self.mg_eq_lbl.setText('{} meq/100g'.format(round((MG_eq), 5)))
            K = float(self.tableWidget_3.item(i, 4).text())
            K_eq = K / 390  # ! CONSTANTE K_EQ
            self.k_eq_lbl.setText('{} meq/100g'.format(round((K_eq), 5)))
            NA = float(self.tableWidget_3.item(i, 12).text())
            NA_eq = NA / 220  # ! CONSTANTE K_EQ
            self.na_eq_lbl.setText('{} meq/100g'.format(round((NA_eq), 5)))
            datos = [CA_eq, MG_eq, K_eq, NA_eq]
            cic = sum(datos)
            self.cic_lbl.setText('{} meq/100g'.format(round((cic), 5)))
            CA_F = round((CA_eq/cic), 2)
            self.ca_f_lbl.setText('{} %'.format((CA_F*100)))
            MG_F = round((MG_eq/cic), 2)
            self.mg_f_lbl.setText('{} %'.format((MG_F*100)))
            K_F = round((K_eq/cic), 2)
            self.k_f_lbl.setText('{} %'.format((K_F*100)))
            # NA_F = round((NA_eq/cic),2)
            NA_F = round((1-(CA_F+MG_F+K_F)/100), 2)
            self.na_f_lbl.setText('{} %'.format((NA_F)))
            ph = float(self.tableWidget_3.item(i, 5).text())
            self.valueClass('ph', ph, 'tipo', 'limite_inferior',
                            'limite_superior', self.tableWidget_4, 0, 1)
            ce = float(self.tableWidget_3.item(i, 6).text())
            self.valueClass('conductividad_electrica', ce, 'tipo',
                            'limite_i', 'limite_s', self.tableWidget_4, 1, 1)
            self.valueClass('conductividad_electrica', ce, 'influencia',
                            'limite_i', 'limite_s', self.tableWidget_4, 1, 2)
            carbonato = float(self.tableWidget_3.item(i, 7).text())
            self.valueClass('carbonatos', carbonato, 'tipo',
                            'limite_inferior', 'limite_superior', self.tableWidget_4, 2, 1)
            caliza = float(self.tableWidget_3.item(i, 9).text())
            self.valueClass('caliza_activa', caliza, 'tipo',
                            'limite_i', 'limite_s', self.tableWidget_4, 3, 1)
            nitrogeno = float(self.tableWidget_3.item(i, 2).text())
            self.valueClass('nitrogeno', nitrogeno, 'tipo', 'limite_inferior',
                            'limite_superior', self.tableWidget_4, 4, 1)
            self.valueClass('nitrogeno', nitrogeno, 'incremento',
                            'limite_inferior', 'limite_superior', self.tableWidget_4, 4, 2)

        except AttributeError as ar:
            print(ar)
            pass
        except ValueError as ve:
            print(ve)
            pass



        
        # print(self.seg_combo.itemText(i))
        # print(self.seg_combo.itemData(i)) 

    def onChangeTableData(self):
        
        self.cox_lbl.setText('')
        self.rel_cn_lbl.setText('')
        self.ca_eq_lbl.setText('')
        self.mg_eq_lbl.setText('')
        self.k_eq_lbl.setText('')
        self.na_eq_lbl.setText('')
        self.cic_lbl.setText('')
        self.ca_f_lbl.setText('')
        self.mg_f_lbl.setText('')
        self.k_f_lbl.setText('')
        self.na_f_lbl.setText('')

    def valueClass(self, table, value, clase, li, ls, widget, row, column, id='id'):
        clase = self.analitic.classification(table=table,value=value,clase=clase,li=li,ls=ls)
        # id = self.analitic.classification(
        #     table=table, value=value, clase=id)
        i_value =QTableWidgetItem(str(value))
        i_clase = QTableWidgetItem(str(clase))
        widget.setItem(row,0,i_value)
        widget.setItem(row,column,i_clase)
        pass

    def informe(self): 
        print('Informe')
        pass
    def analiticaDialog(self): 
        row = self.tableWidget.currentRow()
        idlotecampania = self.tableWidget.item(row, 0).text()
        loteName = self.tableWidget.item(row,1).text() 
        parcelaName = self.tableWidget.item(row,2).text()
        cultivoName = self.tableWidget.item(row,5).text()
        prodValue = self.tableWidget.item(row,6).text()
        dataSuelo = self.getDataSuelo(idlotecampania)
        dataExtraccion = self.getDataExtracciones(idlotecampania)
        

        
        dialog = agraeAnaliticaDialog(
            dataSuelo=dataSuelo, dataExtraccion=dataExtraccion, lote=loteName, parcela=parcelaName, cultivo=cultivoName, idlotecampania=idlotecampania, prod=prodValue)
        dialog.exec_()

    def getDataSuelo(self,id:int): 
        sql = 'select s.segmento, s.n_tipo, s.p_tipo, s.k_tipo, s.carb_tipo from segmentos s where s.idlotecampania = {} order by  s.segmento'.format(id)
        with self.conn: 
            cursor = self.conn.cursor()
            cursor.execute(sql)
            data = cursor.fetchall()
            # print(data)
            # self.dataSignal.emit(data)
        return data

    def getDataExtracciones(self,idLote:int): 
        sql = f'''select distinct u.uf_etiqueta, 
        u.prod_ponderada,
        (u.extraccioncosechan || ' / ' ||
        u.extraccioncosechap || ' / ' ||
        u.extraccioncosechak) cos_npk,
        (u.extraccionresiduon || ' / ' ||
        u.extraccionresiduop || ' / ' ||
        u.extraccioncosechak) res_npk,
        (u.necesidad_n || ' / ' ||
        u.necesidad_p || ' / ' ||
        u.necesidad_k) aportes_npk,
        round(cast(u.area_has as numeric),2) area
        from unidades u
        join lotes ls on ls.idlotecampania = u.idlotecampania
        join cultivo c on c.nombre = ls.cultivo
        where u.idlotecampania = {idLote}
        order by uf_etiqueta'''
        with self.conn: 
            cursor = self.conn.cursor()
            cursor.execute(sql)
            data = cursor.fetchall()
            # print(data)
            # self.dataSignal.emit(data)

        
        
        ufs = ['UF1', 'UF2', 'UF3']
        for e in ufs: 
            data = self.checkData(data, e)
        data = sorted(data)
        return data

    def checkData(self,data,uf):
        for e in data: 
            # print(e[0])
            if uf not in e[0] and len(data) < 9:
                data.append((uf, 0, '0 / 0 / 0', '0 / 0 / 0', '0 / 0 / 0', 0,''))
                break
            else:
                break
        return data


class agraeAnaliticaDialog(QtWidgets.QDialog, agraeAnaliticaDialog):
    matplotlib.use('Qt5Agg')
    closingPlugin = pyqtSignal()

    def __init__(self,dataSuelo, dataExtraccion, lote,parcela, prod, cultivo, idlotecampania, parent=None):
        super(agraeAnaliticaDialog, self).__init__(parent)
        uic.loadUi(os.path.join(os.path.dirname(__file__),
                                'ui/dialogs/analitica_dialog.ui'), self)
        
        # self.pushButton.clicked.connect(self.loadPlot)
        self.utils = AgraeUtils()
        self.conn = self.utils.Conn()


        self.dataSuelo = dataSuelo
        self.dataExtraccion = dataExtraccion
        self.idlotecampania = idlotecampania
        self.lote = lote 
        self.parcela = parcela
        self.prod = prod
        self.cultivo = cultivo
        self.setWindowTitle('Analisis {}-{}'.format(self.lote.upper(),self.parcela.upper()))

        self.enabled = False
        self.i = 0
        
        self.area = None
        self.prod_ponderado = None 
        self.n_ponderado = None
        self.p_ponderado = None
        self.k_ponderado = None
        self.formula = None
        self.dataNecesidades = None
        self.dataValidator = False
        self.dataAuto = None


        self._pesos = []
        self._precios = []

        self.sc = MplCanvas(self)
        self.sc.setStyleSheet("background-color:transparent;")
        self.sc.plot(self.dataSuelo)

        
        
        self.verticalLayout.addWidget(self.sc)
        self.utils = AgraeUtils()
        self.style = self.utils.styleSheet()
        self.iconsPath = self.utils.iconsPath()
        self.UIcomponents()
        self.populateTable()
        
        
        # self.tabWidget.grab().save(os.path.join(os.path.dirname(__file__), r'ui\img\panel.png'))
        # print('dialog {}'.format(self.data))
        # self.n,self.p,self.k = self.necesidadesTotales()

    def UIcomponents(self): 
        leyenda = QPixmap(self.iconsPath['lgnd1'])
        p1_img = QPixmap(self.iconsPath['p1'])
        # leyenda.scaledToWidth(281)
        self.setStyleSheet(self.style)
        self.lgnd1.setPixmap(leyenda)
        self.p1.setPixmap(p1_img)
        self.lbl_lote.setText('{} - {}'.format(self.lote.upper(),self.parcela.upper()))
        self.lbl_cultivo.setText('{}'.format(self.cultivo.upper()))
        self.lbl_prod.setText('{} Kg/Ha'.format(self.prod.upper()))
        self.tableView.setShowGrid(False)

        self.necesidadesTotales()

        self.pushButton.clicked.connect(self.panel)
        self.btn_ajuste_auto.clicked.connect(self.execAutoFert)
        self.btn_save_data.clicked.connect(self.saveFertData)

        self.regexFormula = QRegExpValidator(QRegExp(r'(\d{2}\-\d{2}\-\d{2})'))
        self.line_formula_1.setValidator(self.regexFormula)
        # self.line_formula_1.setInputMask(("dd-"*3)[:-1]) #! AGREGAR MASCARA AL INGRESAR LA FORMULA TODO: 
        self.line_formula_1.textChanged.connect(self.fert)
        self.line_formula_2.setValidator(self.regexFormula)
        self.line_formula_2.textChanged.connect(self.fert)

        self.line_precio_1.textChanged.connect(lambda t, c=self.combo_ajuste_1: self.enableCombo(t,c))
        self.line_precio_2.textChanged.connect(lambda t, c=self.combo_ajuste_2: self.enableCombo(t,c))
        self.line_precio_3.textChanged.connect(lambda t, c=self.combo_ajuste_3: self.enableCombo(t,c))
        self.line_precio_4.textChanged.connect(lambda t, c=self.combo_ajuste_4: self.enableCombo(t,c))

        self.combo_ajuste_1.currentIndexChanged.connect(lambda i,t=self.table_aporte_1,p=self.line_precio_1,l=self.t_aporte_1, lp=self.t_precio_1: self.fertilizar(i,t,p,l,lp,1))
        self.combo_ajuste_2.currentIndexChanged.connect(lambda i,t=self.table_aporte_2,p=self.line_precio_2,l=self.t_aporte_2, lp=self.t_precio_2: self.fertilizar(i,t,p,l,lp,2))
        self.combo_ajuste_3.currentIndexChanged.connect(lambda i,t=self.table_aporte_3,p=self.line_precio_3,l=self.t_aporte_3, lp=self.t_precio_3: self.fertilizar(i,t,p,l,lp,3))
        self.combo_ajuste_4.currentIndexChanged.connect(lambda i,t=self.table_aporte_4,p=self.line_precio_4,l=self.t_aporte_4, lp=self.t_precio_4: self.fertilizar(i,t,p,l,lp,4))

        self.getDataFertilizacion()


    def necesidadesTotales(self): 
        data = self.dataExtraccion
        ce = [int(e[1]) for e in data]
        area = [float(e[5]) for e in data]
        npk = [str(e[4]) for e in data]
        lista = [e.split(' / ') for e in npk ]
        try: 
            n = [int(e[0]) for e in lista ]
            p = [int(e[1]) for e in lista ]
            k = [int(e[2]) for e in lista ]



            self.prod_ponderado = self.sumaPonderada(ce,area)
            self.n_ponderado = self.sumaPonderada(n, area)
            self.p_ponderado = self.sumaPonderada(p, area)
            self.k_ponderado = self.sumaPonderada(k, area)
            self.area = round(sum(area),2)

            
            self.prod_pond.setText('{} Kg Cosecha/Ha'.format(self.prod_ponderado))
            self.area_total.setText('{} Ha'.format(round(sum(area),2)))
            self.npk_pond.setText('{} / {} / {}'.format(self.n_ponderado,self.p_ponderado,self.k_ponderado))
        except: pass
        
        # self.ajustesFertilizantes(n=n,x=0.06,p=p,y=0.16,k=k,z=0.24)

    def populateTable(self): 
        cols = [0,1,2,3,4,5]
        datagen = ([f[col] for col in cols] for f in self.dataExtraccion)
        
        df = pd.DataFrame.from_records(data=datagen, columns=cols)        
        df_sorted = df.sort_values(by=0).round({'area_has':2})
        model = TableModel(df_sorted)
        self.tableView.setModel(model)
        self.tableView.setColumnWidth(0,35)
        self.tableView.setColumnWidth(5,35)
        self.tableView.grab().save(os.path.join(
            os.path.dirname(__file__), r'ui\img\tabla.png'))
        self.sc.saveImage(os.path.join(
        os.path.dirname(__file__), r'ui\img\chart.png'))

        uf = [e[0] for e in self.dataExtraccion]
        area = [float(e[5]) for e in self.dataExtraccion]
        npk = [str(e[4]) for e in self.dataExtraccion]
        lista = [e.split(' / ') for e in npk ]
        try: 
            n = [int(e[0]) for e in lista ]
            p = [int(e[1]) for e in lista ]
            k = [int(e[2]) for e in lista ]
            dataNecesidades = zip(uf,n,p,k)
            cols = [0,1,2,3]
            datagen = ([f[col] for col in cols] for f in dataNecesidades)
            df = pd.DataFrame.from_records(data=datagen, columns=cols)
            model = TableModel(df)
            self.table_necesidades.setModel(model)
            self.table_necesidades.setColumnWidth(0, 35)
            self.table_necesidades.setColumnWidth(1, 79)
            self.table_necesidades.setColumnWidth(2, 79)
            self.table_necesidades.setColumnWidth(3, 79)
        except: pass
    
    def sumaPonderada(self,x,y):
        """
        x = Value y = Area

        """
        try:
            zipedd = zip(x, y)
            p1 = [x * y for (x, y) in zipedd]
            p2 = round(sum(p1)/sum(y))
        except ZeroDivisionError:
            p2=0 

        # print(p2)
        return p2
 
    def ajustesFertilizantes(self,n:list,x:float,p:list,y:float,k:list,z:float):
        
        """
        n: List of uf values for N
        x: value for N dosification
        p: List of uf values for P
        y: Value dosification for P, 
        k: List of K values
        z: Value dosification for K 

        return data: Structured analized values, Totals


        """
        uf = ['UF1','UF2','UF3','UF4','UF5','UF6','UF7','UF8','UF9']

        n1 = [round(e/x) if x != 0 else 0 for e in n]
        zn = zip(uf, n1)
        tn = sum(n1)
        dataN = {k:v for k,v in zn}
        # print('N: ', dataN)

        p1 = [round(e/y) if y != 0 else 0 for e in p]
        zp = zip(uf,p1)
        dataP = {k:v for k,v in zp}
        tp = sum(p1)
        # print('P: ',dataP)  

        k1 = [round(e/z) if z != 0 else 0 for e in k]
        zk = zip(uf,k1)
        tk = sum(k1)
        dataK = {k:v for k,v in zk}
        # print('K :',dataK)

        pk1 = [round((e+i)/2) for e,i in zip(p1,k1)]
        zpk = zip(uf,pk1)
        tpk = sum(pk1)
        dataPK = {k:v for k,v in zpk}

        totales = [tn,tp,tk,tpk]

        # print('PK :',dataPK)

        data = zip(uf,n1,p1,k1,pk1)
        return data

    def fertilizar(self,index,table,precio,l_peso,l_precio,i):
        if index != 0 and self.dataValidator == False:
            precio = precio.text()
            data = self.dataExtraccion
            # print(precio)
            # print(self.dataExtraccion)
            area = [float(e[5]) for e in data]
            npk = [str(e[4]) for e in data]
            lista = [e.split(' / ') for e in npk ]
            n = [int(e[0]) for e in lista ]
            p = [int(e[1]) for e in lista ]
            k = [int(e[2]) for e in lista ]
        elif self.dataValidator == True:
            precio = precio.text()
            data = self.dataNecesidades
            data = list(zip(*[data[col] for col in data]))
            # print(data)
            area = [float(e[5]) for e in self.dataExtraccion]
            uf = [e[0] for e in data]
            n = [int(e[1]) for e in data]
            p = [int(e[2]) for e in data]
            k = [int(e[3]) for e in data]



        f_n = int(self.formula[0])/100
        f_p = int(self.formula[1])/100
        f_k = int(self.formula[2])/100


        cols = [0,(index)]
        # cols = [i for i in range(5)]
        # cols = cols.append((self.combo_ajuste_1.currentIndex()+1))
        d = self.ajustesFertilizantes(n=n,x=f_n,p=p,y=f_p,k=k,z=f_k)
        # print(d)        
        datagen = ([f[col] for col in cols] for f in d)
        df = pd.DataFrame.from_records(data=datagen, columns=cols)
        # df.style.format({index: '{:.1f} Kg/Ha'})
        model = TableModel(df)
        table.setModel(model)
        table.setColumnWidth(0, 35)
        table.setColumnWidth(1, 35)
        table.grab().save(os.path.join(os.path.dirname(__file__), r'ui\img\tf{}.png'.format(i)))


        d = self.ajustesFertilizantes(n=n, x=f_n, p=p, y=f_p, k=k, z=f_k)
        datagen = ([f[col] for col in cols] for f in d)
        l = list(datagen)
        # print(d)
        # print(l)
        a1 = [int(e[1]) for e in l]
        p_aporte = self.sumaPonderada(a1, area)
        p_aporte = p_aporte * sum(area)
        self._pesos.append(round(p_aporte))

        pr_aporte = int(precio)*(int(p_aporte)/1000)
        self._precios.append(round(pr_aporte))
        l_peso.setText('{} Kg/Ha'.format(str(round(p_aporte))))
        l_precio.setText('{} €/Ha'.format(str(round(pr_aporte))))

        
        d = self.ajustesFertilizantes(n=n, x=f_n, p=p, y=f_p, k=k, z=f_k)
        genValue = (f[index]  for f in d)
        values = list(genValue)
        # print(values)
        self.i = self.i + 1
        self.balanceNutrientes(values,f_n,f_p,f_k)

    def balanceNutrientes(self,valores:list,dosis_n:float,dosis_p:float,dosis_k:float):
        # conn = self.utils.Conn() 
        # with conn: 
        #     cursor = conn.cursor() 
        #     sql = '''select (necesidad_nf || ' / ' ||  
        #             necesidad_pf || ' / ' ||   
        #             necesidad_kf) necesidad
        #             from necesidades n where idlotecampania = {}'''.format(self.idlotecampania)
        #     cursor.execute(sql)
        #     data = cursor.fetchall() 
            # print(data)

        if self.dataValidator == False:
            data = self.dataExtraccion
            uf = [e[0] for e in data]
            area = [float(e[5]) for e in data]
            npk = [str(e[4]) for e in data]
            lista = [e.split(' / ') for e in npk ]
            n = [int(e[0]) for e in lista ]
            p = [int(e[1]) for e in lista ]
            k = [int(e[2]) for e in lista ]        

            aporte_n = [round(v*dosis_n) for v in valores]
            aporte_p = [round(v*dosis_p) for v in valores]
            aporte_k = [round(v*dosis_k) for v in valores]
            # print(aporte_n)
            total_n = [int(i-a) for i,a in zip(n,aporte_n)]
            total_p = [int(i-a) for i,a in zip(p,aporte_p)]
            total_k = [int(i-a) for i,a in zip(k,aporte_k)]

            self.dataNecesidades = zip(uf, total_n, total_p, total_k)

            cols = [0, 1, 2, 3]
            datagen = ([f[col] for col in cols] for f in self.dataNecesidades)
            df = pd.DataFrame.from_records(data=datagen, columns=cols)
            model = TableModel(df)

            self.table_necesidades.setModel(model)
            self.table_necesidades.setColumnWidth(0, 35)
            self.table_necesidades.setColumnWidth(1, 79)
            self.table_necesidades.setColumnWidth(2, 79)
            self.table_necesidades.setColumnWidth(3, 79)
            # print('-----------dep 1 ------------')
            self.dataNecesidades = df
            self.dataValidator = True
            # print(self.dataNecesidades)
            # print('-----------dep 1 end ------------')



        else: 
            data = self.dataNecesidades
            data = list(zip(*[data[col] for col in data]))
            # print(data)
            
            uf = [e[0] for e in data]
            n = [int(e[1]) for e in data ]
            p = [int(e[2]) for e in data ]
            k = [int(e[3]) for e in data ]
            aporte_n = [round(v*dosis_n) for v in valores]
            aporte_p = [round(v*dosis_p) for v in valores]
            aporte_k = [round(v*dosis_k) for v in valores]
            
            total_n = [int(i-a) for i, a in zip(n, aporte_n)]
            total_p = [int(i-a) for i, a in zip(p, aporte_p)]
            total_k = [int(i-a) for i, a in zip(k, aporte_k)]
            self.dataNecesidades = zip(uf, total_n, total_p, total_k)

            # print(total_n,total_p,total_k)


        
            cols = [0, 1, 2, 3]
            datagen = ([f[col] for col in cols] for f in self.dataNecesidades)
            df = pd.DataFrame.from_records(data=datagen, columns=cols)
            model = TableModel(df)
            self.table_necesidades.setModel(model)
            self.table_necesidades.setColumnWidth(0, 35)
            self.table_necesidades.setColumnWidth(1, 79)
            self.table_necesidades.setColumnWidth(2, 79)
            self.table_necesidades.setColumnWidth(3, 79)
            # print('----------- dep 2------------------')
            self.dataNecesidades = df
            # print(self.dataNecesidades)
            # print('-----------dep 2 end ------------')
            self.dataValidator = True



        
        
    

       
        pass
       
    def enableCombo(self,text,combo):
        if len(text) >= 3:        
            combo.setEnabled(True)
        else:
            combo.setEnabled(False)
  
    def fert(self,text):
        if len(text) ==8:
            self.formula = text.split('-')
            # self.pushButton_2.setEnabled(True)

   
    def getDataFertilizacion(self): 
        sql = ''' 
        select ls.fertilizantefondoformula,
        ls.fertilizantefondoprecio,
        ls.fertilizantefondoajustado,
        ls.fertilizantecob1formula,
        ls.fertilizantecob1precio,
        ls.fertilizantecob1ajustado,
        ls.fertilizantecob2formula,
        ls.fertilizantecob2precio,
        ls.fertilizantecob2ajustado,
        ls.fertilizantecob3formula,
        ls.fertilizantecob3precio,
        ls.fertilizantecob3ajustado from lotes ls
        where ls.idlotecampania = {}
        '''.format(self.idlotecampania)
        with self.conn:
            cursor = self.conn.cursor()
            cursor.execute(sql)
            data = cursor.fetchall()
        data = list(data[0])        
        data = [e if e != 0 and e !=
                '' and e is not None else None for e in data]
        _validate = [data[e] for e in range(3) if data[e] != None]
        # print(_validate)
        # print(len(_validate))

        if len(_validate) >= 3:
            # print(data)
            self.btn_ajuste_auto.setEnabled(True)
            self.btn_save_data.setEnabled(False)
            self.dataAuto = data
        else: 
            self.btn_save_data.setEnabled(True)
        
    def autoFert(self):
        txt = '''<html><head/><body><p align="center">Se han calculado 1 combinaciones de <br/>fertilizantes para ajustar las<br/>necesidades del cultivo. De ellas se ha<br/>seleccionado la combinacion mas<br/>economica.<br/>Los fertilizantes que<br/>se han Analizado son:</p>'''
        data = self.dataAuto
        print(data)
        if data[0] != None or data[1] != None or data[2] != None :
            f1 = str(data[0])
            txt = txt + '''<p align="center"><span style=" font-weight:600;">APORTE 1 {} </span>  </p>'''.format(f1)   
            self.line_formula_1.setText(data[0])
            self.line_precio_1.setText(str(int(round(data[1]))))
            self.combo_ajuste_1.setCurrentText(str(data[2]).upper())
            time.sleep(1)
            # print(data[0])
        if data[3] != None and data[4] != None and data[5] != None :
            f2 = str(data[3])
            txt = txt + '''<p align="center"><span style=" font-weight:600;">APORTE 2 {} </span></p>'''.format(f2)   
            self.line_formula_2.setText(data[3])
            self.line_precio_2.setText(str(int(round(data[4]))))
            self.combo_ajuste_2.setCurrentText(str(data[5]).upper())
            time.sleep(1)
            # print(data[2])
        if data[6] != None and data[7] != None and data[8] != None:
            f3 = str(data[6])
            txt = txt + '''<p align="center"><span style=" font-weight:600;">APORTE 3 {} </span></p>'''.format(f3)
            self.line_formula_3.setText(data[6])
            self.line_precio_3.setText(str(int(round(data[7]))))
            self.combo_ajuste_3.setCurrentText(str(data[8]).upper())
            time.sleep(1)
        if data[9] != None and data[10] != None and data[11] != None :
            f4 = str(data[9])
            txt = txt + '''<p align="center"><span style=" font-weight:600;">APORTE 4 {} </span></p>'''.format(f4)
            self.line_formula_2.setText(data[9])
            self.line_precio_2.setText(str(int(round(data[10]))))
            self.combo_ajuste_2.setCurrentText(str(data[11]).upper())
            time.sleep(1)
        txt = txt + '''</body></html>'''
        self.label_16.setText(txt)
        self.btn_save_data.setEnabled(True)
    def execAutoFert(self):
        x = threading.Thread(target=self.autoFert)
        x.start()
        
    def panel(self): 

        npk = [self.n_ponderado,self.p_ponderado, self.k_ponderado]
        render = PanelRender(self.lote, self.parcela, self.cultivo, self.prod_ponderado, self.area, npk,self.i,self._pesos,self._precios)

        render.savePanel()
    
    def saveFertData(self):
        sql = []

        if len(self.line_precio_1.text()) >= 3:
            f1 = str(self.line_formula_1.text())
            print(f1)
            p1 = int(round(float(self.line_precio_1.text())))
            a1 = str(self.combo_ajuste_1.currentText())
            sql1= ''' update campania 
            set fertilizantefondoformula = '{}',
            fertilizantefondoprecio = {},
            fertilizantefondoajustado = '{}'
            from (select idcampania id  from lotecampania lc
            where lc.idlotecampania = {} ) sq
            where idcampania = sq.id '''.format(f1, p1, a1,  self.idlotecampania)
            sql.append(sql1)
            # print(sql1)
        

        

        if len(self.line_precio_2.text()) >= 3:
            f2 = str(self.line_formula_2.text())
            p2 = int(round(float(self.line_precio_2.text())))
            a2 = str(self.combo_ajuste_2.currentText())
            sql2= ''' update campania 
            set fertilizantecob1formula = sq.a2_formula,
            fertilizantecob1precio = sq.a2_precio,
            fertilizantecob1ajustado = sq.a2_ajuste
            from (select idcampania id, '{}' a2_formula, {} a2_precio, '{}' a2_ajuste  from lotecampania lc
            where lc.idlotecampania = {} ) sq
            where idcampania = sq.id '''.format(f2, p2, a2,  self.idlotecampania)
            sql.append(sql2)


        if len(self.line_precio_3.text()) >= 3:
            f3 = str(self.line_formula_3.text())
            p3 = int(round(float(self.line_precio_3.text())))
            a3 = str(self.combo_ajuste_3.currentText())
            sql3= ''' update campania 
            set fertilizantecob2formula = sq.a3_formula,
            fertilizantecob2precio = sq.a3_precio,
            fertilizantecob2ajustado = sq.a3_ajuste
            from (select idcampania id, '{}' a3_formula, {} a3_precio, '{}' a3_ajuste  from lotecampania lc
            where lc.idlotecampania = {} ) sq
            where idcampania = sq.id '''.format(f3, p3, a3,  self.idlotecampania)
            sql.append(sql3)

        if len(self.line_precio_4.text()) >= 3:
            f4 = str(self.line_formula_4.text())
            p4 = int(round(float(self.line_precio_4.text())))
            a4 = str(self.combo_ajuste_4.currentText())
            sql4 = ''' update campania 
            set fertilizantecob3formula = sq.a4_formula,
            fertilizantecob3precio = sq.a4_precio,
            fertilizantecob3ajustado = sq.a4_ajuste
            from (select idcampania id, '{}' a4_formula, {} a4_precio, '{}' a4_ajuste  from lotecampania lc
            where lc.idlotecampania = {} ) sq
            where idcampania = sq.id '''.format(f4, p4, a4,  self.idlotecampania)
            sql.append(sql4)

        if self.combo_status.currentIndex() != 0:
            status = self.combo_status.currentText()
            # print(status)
            sql_status = ''' update campania 
            set fert_status = sq.a_status
            from (select idcampania id, '{}' a_status  from lotecampania lc
            where lc.idlotecampania = {} ) sq
            where idcampania = sq.id '''.format(status, self.idlotecampania)
            sql.append(sql_status)
        with self.conn: 
            cursor = self.conn.cursor()
            for q in sql:                
                try:
                    cursor.execute(q)
                    self.conn.commit()
                    self.utils.msgBar('Datos de Fertilizacion guardados correctamente',3,10)
                except Exception as ex:
                    print(ex)



        

        

    def closeEvent(self, event):
        self.closingPlugin.emit()
        self.sc.close()
        event.accept()


class loteFilterDialog(QtWidgets.QDialog, agraeLoteParcelaDialog):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(loteFilterDialog, self).__init__(parent)
        # self.s = QSettings('agrae', 'dbhost')
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.utils = AgraeUtils()
        self.tools = AgraeToolset()
        self.conn = self.utils.Conn()
        self.dns = self.utils.dns
        self.UIcomponents()
        self.sinceDateStatus = False
        self.buscarLotes()

        
        # self.connected = False

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def UIcomponents(self):
        self.lotesCompleter()
        
        # columna geometria loteparcela
        self.tableWidget.setColumnHidden(6, True)
        self.tableWidget.setColumnHidden(0, True)

        icons_path = self.utils.iconsPath()
        self.sinceDate.dateChanged.connect(self.sinceDateChange)
        self.line_buscar.setClearButtonEnabled(True)
        line_buscar_action = self.line_buscar.addAction(
            QIcon(icons_path['search_icon_path']), self.line_buscar.TrailingPosition)
        line_buscar_action.triggered.connect(self.buscarLotes)
        self.btn_add_layer.setIcon(QIcon(icons_path['add_layer_to_map']))
        self.btn_add_layer.setIconSize(QtCore.QSize(20, 20))
        self.btn_add_layer.clicked.connect(self.cargarLote)
        # self.btn_add_layer.clicked.connect(self.selectedRows)
        self.btn_add_layer_2.setIconSize(QtCore.QSize(20, 20))
        self.btn_add_layer_2.setIcon(QIcon(icons_path['add_group_layers']))
        self.btn_add_layer_2.setToolTip('Añadir grupo de parcelas')
        self.btn_add_layer_2.clicked.connect(self.cargarLoteData)

        self.btn_reload.setIcon(QIcon(icons_path['reload_data']))
        self.btn_reload.setIconSize(QtCore.QSize(20, 20))
        self.btn_reload.setToolTip('Buscar todos los lotes')
        self.btn_reload.clicked.connect(self.reloadLotes)

        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        

        self.tabWidget.setCurrentIndex(0)
        self.tabWidget_3.setCurrentIndex(0)
        
        # self.buscarLotes()
        # self.tableWidget.setColumnHidden(0, True)
        # self.tableWidget.setColumnHidden(4, True)
        # self.tableWidget.setColumnHidden(6, True)

        # btn = QPushButton('▾',flat=True)
        # btn.setToolTip('Expandir')
        # btn.setCheckable(True)
        # btn.toggled.connect(self.hideAction)
        # self.tabWidget_3.setCornerWidget(btn)

        line_lote_search = self.line_lote_nombre.addAction(
            QIcon(icons_path['search_icon_path']), self.line_lote_nombre.LeadingPosition)
        line_lote_search.triggered.connect(self.loteDialog)

        self.line_lote_save = self.line_lote_nombre.addAction(
            QIcon(icons_path['save']), self.line_lote_nombre.TrailingPosition)
        self.line_lote_save.triggered.connect(self.crearLote)

        line_loteidexp_action = self.line_lote_idexp.addAction(
            QIcon(icons_path['search_icon_path']), self.line_lote_idexp.TrailingPosition)
        line_loteidexp_action.triggered.connect(self.expDialog)

        line_loteidcultivo_action = self.line_lote_idcultivo.addAction(
            QIcon(icons_path['search_icon_path']), self.line_lote_idcultivo.TrailingPosition)
        line_loteidcultivo_action.triggered.connect(self.cultivoDialog)

        self.btn_crear_campania.setIcon(QIcon(icons_path['save']))
        self.btn_crear_campania.setIconSize(QtCore.QSize(20, 20))
        self.btn_crear_campania.setToolTip('Crear Campania')
        self.btn_crear_campania.clicked.connect(self.crearCampania)

        self.lote_dateSiembra.setDate(QDate.currentDate())
        self.lote_dateCosecha.setDate(QDate.currentDate())
        self.lote_dateCosecha.setMinimumDate(QDate.currentDate())

        #* signals 
        self.line_lote_nombre.returnPressed.connect(self.campaniaValidator)
        self.line_lote_nombre.textChanged.connect(self.campaniaValidator)
        self.cmb_moneda.currentIndexChanged.connect(self.campaniaValidator)
        self.cmb_regimen.currentIndexChanged.connect(self.campaniaValidator)
        
        self.lote_dateSiembra.dateChanged.connect(self.siembraDateChange)

        


        pass
    
    


    def hideAction(self,checked): 
        if checked == True:
            print(checked)
            self.tabWidget_3.setMaximumHeight(self.tabWidget_3.tabBar().height())
            self.tabWidget_3.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        else: 
            print(checked)
            self.tabWidget_3.setMaximumHeight(self.tabWidget_3.tabBar().height())
            self.tabWidget_3.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)

    def sinceDateChange(self):
        self.sinceDateStatus = True
        d1 = self.sinceDate.date()
        self.untilDate.setMinimumDate(d1)
        self.untilDate.setEnabled(True)

    #* CRUD FUNCTIONS
    def crearLote(self):
        try:
            self.tools.crearLote(self)
            print('ok')
        except Exception as ex:
            print(ex)
            pass

    def cargarLote(self):
        self.tools.cargarLote(self)

    def borrarLote(self):
        pass

    def actualizarLote(self):
        pass
    
    def crearCampania(self):
        # self.tools.crearCampania(self)
        lote = str(self.line_lote_nombre.text()).upper()
        idexp = self.line_lote_idexp.text()
        idcult = self.line_lote_idcultivo.text()
        regimen = int(self.cmb_regimen.currentIndex())
        produccion = float(self.ln_produccion.text())
        dateSiembra = self.lote_dateSiembra.date().toString('yyyy.MM.dd')
        dateCosecha = self.lote_dateCosecha.date().toString('yyyy.MM.dd')
        sqlBasico = None

        
        if self.cmb_moneda.currentIndex() > 0:
            moneda = self.cmb_moneda.currentText()
        else:
            moneda = ''


       
        if self.groupBox.isChecked() == True:
            # print('Checked')
            dateFondo = self.date_fert_1.date().toString('yyyy.MM.dd')
            fondoFormula = self.line_formula_fert_1.text()
            fondoPrecio = float(self.line_precio_fert_1.text())
            fondoCalculado = float(self.line_calculado_fert_1.text())
            fondoAplicado = float(self.line_aplicado_fert_1.text())
            if self.cmb_ajustar_fert_1.currentIndex() > 0:
                fondoAjustado = self.cmb_ajustar_fert_1.currentText()
            else:
                fondoAjustado = ''    
            


            dateCob1 = self.date_fert_2.date().toString('yyyy.MM.dd')
            cob1Formula = self.line_formula_fert_2.text()
            cob1Precio = float(self.line_precio_fert_2.text())
            cob1Calculado = float(self.line_calculado_fert_2.text())
            cob1Aplicado = float(self.line_aplicado_fert_2.text())
            if self.cmb_ajustar_fert_2.currentIndex() > 0:
                cob1Ajustado = self.cmb_ajustar_fert_2.currentText()
            else: 
                cob1Ajustado = ''

            dateCob2 = self.date_fert_3.date().toString('yyyy.MM.dd')
            cob2Formula = self.line_formula_fert_3.text()
            cob2Precio = float(self.line_precio_fert_3.text())
            cob2Calculado = float(self.line_calculado_fert_3.text())
            cob2Aplicado = float(self.line_aplicado_fert_3.text())
            if self.cmb_ajustar_fert_3.currentIndex() > 0:
                cob2Ajustado = self.cmb_ajustar_fert_3.currentText()
            else: 
                cob2Ajustado = ''

            dateCob3 = self.date_fert_4.date().toString('yyyy.MM.dd')
            cob3Formula = self.line_formula_fert_4.text()
            cob3Precio = float(self.line_precio_fert_4.text())
            cob3Calculado = float(self.line_calculado_fert_4.text())
            cob3Aplicado = float(self.line_aplicado_fert_4.text()) 
            if self.cmb_ajustar_fert_4.currentIndex() > 0:                 
                cob3Ajustado = self.cmb_ajustar_fert_4.currentText()
            else: 
                cob3Ajustado = ''

            sql = f'''
            insert into campania 
            values(nextval('campania_idcampania_seq') ,{idexp}, {idcult},'{dateSiembra}','{dateCosecha}', '{dateFondo}','{fondoFormula}',{fondoPrecio}, {fondoCalculado}, '{fondoAjustado}',  {fondoAplicado}, '{dateCob1}', '{cob1Formula}', {cob1Precio},  {cob1Calculado}, '{cob1Ajustado}',  {cob1Aplicado}, '{dateCob2}',  '{cob2Formula}',  {cob2Precio},   {cob2Calculado},  '{cob2Ajustado}', {cob2Aplicado}, '{dateCob3}',  '{cob3Formula}', {cob3Precio},  {cob3Calculado}, '{cob3Ajustado}',  {cob3Aplicado} , '{moneda}',{regimen}, {produccion});
            '''
            # print(sql)
        else: 
            sql = f'''
            insert into campania(idexplotacion,idcultivo,fechasiembra,fechacosecha,regimen,prod_esperada,unidadesprecio)
            values({idexp}, {idcult},'{dateSiembra}',{regimen}, {produccion},'{moneda}');'''
            # print(sql)

        sql2 = f'''insert into lotecampania(idlote,idcampania) 
        select ql.idlote, qc.idcampania from (select idlote from lote where nombre = '{lote}') as ql, (select idcampania from campania order by idcampania desc limit 1) as qc; '''
       
       
        conn = self.conn
        
        
        with conn:
            try: 
                if regimen != 0:
                    cursor = conn.cursor()
                    cursor.execute(sql)
                    conn.commit()
                    cursor.execute(sql2)
                    conn.commit()
                    QMessageBox.about(self, f"aGrae GIS:",f"Campaña creada y asociada correctamente")
                else: 
                    QMessageBox.about(self, f"aGrae GIS:",f"Debe seleccionar un Regimen de Cultivo")
            except InterfaceError as ie: 
                conn = self.conn
                cursor = conn.cursor()
                cursor.execute(sql)
                QMessageBox.about(self, f"aGrae GIS:", f"Campaña creada correctamente")


            except Exception as e: 
                # print(e)
                QMessageBox.about(self, f"Error: ",f"{e}")
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                print(exc_type, fname, exc_tb.tb_lineno)

        self.line_lote_nombre.setText('')
        pass

    def actualizarCampania(self): 
        pass

    #* MAIN FUNCTIONS
    def buscarLotes(self):
        self.tools.buscarLotes(self, self.sinceDateStatus)
        self.line_buscar.setText('')

    def reloadLotes(self):
        self.tools.buscarLotes(self, False)
        self.btn_reload.setEnabled(False)

    def cargarLoteData(self):
        dns = self.dns
        row = self.tableWidget.currentRow()
        idlotecampania = self.tableWidget.item(row, 0).text()
        loteNombre = self.tableWidget.item(row, 1).text()
        parcela = self.tableWidget.item(row, 2).text()
        cultivo = self.tableWidget.item(row, 5).text()
        sql = f'''select p.idparcela from parcela p, lotes ls
            where st_within(p.geometria,ls.geometria) and ls.idlotecampania = {idlotecampania}
            '''

        cursor = self.conn.cursor()
        cursor.execute(sql)
        data = cursor.fetchall()
        s = ",".join([str(e[0]) for e in data])
        # print(s)
        exp = f''' "idparcela" in ({s}) '''  # print(exp)

        uriSegmentos = QgsDataSourceUri()
        uriSegmentos.setConnection(dns['host'], dns['port'],
                                   dns['dbname'], dns['user'], dns['password'])
        uriSegmentos.setDataSource(
            'public', 'segmentos', 'geometria', f'"idlotecampania" = {idlotecampania}', 'id')
        lyrSegmentos = QgsVectorLayer(uriSegmentos.uri(
            False), f'''SEGMENTOS {loteNombre}-{cultivo}''', 'postgres')

        uriAmbientes = QgsDataSourceUri()
        uriAmbientes.setConnection(dns['host'], dns['port'],
                                   dns['dbname'], dns['user'], dns['password'])
        uriAmbientes.setDataSource(
            'public', 'ambientes', 'geometria', f'"idlotecampania" = {idlotecampania}', 'id')
        lyrAmbientes = QgsVectorLayer(uriAmbientes.uri(
            False), f'''AMBIENTES {loteNombre}-{cultivo}''', 'postgres')

        uriParcelas = QgsDataSourceUri()
        uriParcelas.setConnection(dns['host'], dns['port'],
                                  dns['dbname'], dns['user'], dns['password'])
        uriParcelas.setDataSource(
            'public', 'parcela', 'geometria', exp, 'idparcela')
        lyrParcelas = QgsVectorLayer(uriParcelas.uri(
            False), f'{parcela}-{loteNombre}-{cultivo}', 'postgres')

        uriUnidades = QgsDataSourceUri()
        uriUnidades.setConnection(dns['host'], dns['port'],
                                  dns['dbname'], dns['user'], dns['password'])
        uriUnidades.setDataSource(
            'public', 'unidades', 'geometria', f'"idlotecampania" = {idlotecampania}', 'id')
        lyrUnidades = QgsVectorLayer(uriUnidades.uri(
            False), f'''UNIDADES {loteNombre}-{cultivo}''', 'postgres')

        QgsProject.instance().addMapLayer(lyrUnidades)
        QgsProject.instance().addMapLayer(lyrAmbientes)
        QgsProject.instance().addMapLayer(lyrSegmentos)
        QgsProject.instance().addMapLayer(lyrParcelas)
        self.tools.cargarLote(self)

    def lotesCompleter(self):
        cursor = self.conn.cursor()
        sql = '''select distinct unnest(array[l.nombre, p.nombre, c.nombre]) from lote l
        left join lotecampania lc on lc.idlote = l.idlote
        left join campania ca on ca.idcampania = lc.idcampania 
        left join loteparcela lp on lc.idlotecampania = lp.idlotecampania 
        left join parcela p on lp.idparcela = p.idparcela
        left join cultivo c on c.idcultivo = ca.idcultivo'''
        cursor.execute(sql)
        data = cursor.fetchall()
        listaLotes = [e[0] for e in data]
        # print(listaLotes)
        completerLotes = QCompleter(listaLotes)
        completerLotes.setCaseSensitivity(False)
        self.line_buscar.setCompleter(completerLotes)

    #* VALIDATORS AND SLOTS
    def campaniaValidator(self,e):
        dateSiembra = self.lote_dateSiembra.date().toString('yyyy.MM.dd')
        dateCosecha = self.lote_dateCosecha.date().toString('yyyy.MM.dd')
        
        if self.cmb_regimen.currentIndex() != 0 and self.cmb_moneda.currentIndex() != 0 and len(self.line_lote_nombre.text()) != 0: 
            if dateCosecha != dateSiembra and len(self.ln_produccion.text()) > 0 and len(self.line_lote_idexp.text()) > 0 and len(self.line_lote_idcultivo.text()) > 0:
                # print('valido',e)
                self.btn_crear_campania.setEnabled(True)
                # print(self.groupBox.isChecked())
            else: 
                self.btn_crear_campania.setEnabled(False)
        elif self.cmb_regimen.currentIndex() == 0 or self.cmb_moneda.currentIndex() == 0: 
            # print('no valido',e)
            self.btn_crear_campania.setEnabled(False)

    def siembraDateChange(self):
        d1 = self.lote_dateSiembra.date()
        self.lote_dateCosecha.setMinimumDate(d1)
        self.lote_dateCosecha.setDate(d1)

    #* DIALOGS 
    def loteDialog(self):
        dialog = loteFindDialog()
        dialog.loadData()
        dialog.pushButton_2.setEnabled(False)
        dialog.pushButton_3.setEnabled(False)
        dialog.getNombreLote.connect(self.populateLote)
        dialog.exec_()

    def populateLote(self, nombre):
        print(nombre)
        self.line_lote_nombre.setText(nombre)
        self.line_lote_nombre.setReadOnly(True)
        # self.line_lote_save.triggered.disconnect(self.crearLote)        

    def expDialog(self):
        dialog = expFindDialog()
        dialog.loadData()
        dialog.getIdExp.connect(self.popIdExp)
        dialog.exec_()

    def popIdExp(self, value):

        self.line_lote_idexp.setText(f'{value}')

    def cultivoDialog(self):
        dialog = cultivoFindDialog()
        dialog.loadData()
        dialog.getIdCultivo.connect(self.popIdCultivo)
        dialog.exec_()

    def popIdCultivo(self, value):

        self.line_lote_idcultivo.setText(f'{value}')



class MplCanvas(FigureCanvasQTAgg):
    def __init__(self, parent=None):
        # plt.rcParams.update({'font.size': 8})
        fig, (self.ax1, self.ax2, self.ax3) = plt.subplots(1, 3)
        fig.patch.set_facecolor('None')
        fig.patch.set_alpha(0)
        super(MplCanvas, self).__init__(fig)
        # self.plot()
        # self.data = str(data)
        # print('plot {}'.format(self.data))
    def close(self): 
        plt.cla()
    def saveImage(self,path):
        self.ax1.set_title('')  
        self.ax1.set_yticklabels('') 
        self.ax2.set_title('')  
        self.ax2.set_yticklabels('') 
        self.ax3.set_title('')  
        self.ax3.set_yticklabels('') 
        plt.savefig(path)

    def plot(self,data):
        

        def valores(suelo):
            values = []
            colors = []
            for i in suelo:
                if i == 'Muy Alto':
                    colors.append('#7702E5')
                    values.append(5)
                elif i == 'Alto':
                    colors.append('#0293E5')
                    values.append(4)
                elif i == 'Medio':
                    colors.append('#06E502')
                    values.append(3)
                elif i == 'Normal':
                    colors.append('#06E502')
                    values.append(3)
                
                elif i == 'Bajo':
                    colors.append('#FF9633')
                    values.append(2)
                elif i == 'Muy Bajo':
                    colors.append('#FF3333')
                    values.append(1)
                else:
                    values.append(0)
            # print(values)
            return values, colors

        def borderless(ax):
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(True)
        
        def barGenerator(ax,values,colors,y,y_pos,title,y_visible=True):
            ax.barh(y_pos, values, align='center', color=colors)
            ax.set_xticks([])
            ax.set_title('{}'.format(title))            
            ax.set_yticks(y_pos)
            ax.set_yticklabels(y, fontsize=8)
            ax.invert_yaxis()  # labels read top-to-bottom
            ax.patch.set_facecolor('None')
            ax.patch.set_alpha(0)
            ax.set_xlim(0, 5)
            borderless(ax)
            if y_visible == False:                
                ax.axes.get_yaxis().set_visible(False)

        def getValues(i):
            if i <= len(n_values):  
                values = [n_values[i], p_values[i], k_values[i], carb_values[i]]
            else: 
                values = [0,0,0,0]
            
            return values   

    

        segmentos = [f[0] for f in data]
        nitrogeno = [f[1] for f in data]
        fosforo = [f[2] for f in data]
        potasio = [f[3] for f in data]
        carbonato = [f[4] for f in data]
        n_values = {segmentos[i]: nitrogeno[i] for i in range(len(segmentos))}
        p_values = {segmentos[i]: fosforo[i] for i in range(len(segmentos))}
        k_values = {segmentos[i]: potasio[i] for i in range(len(segmentos))}
        carb_values = {segmentos[i]: carbonato[i] for i in range(len(segmentos))}
        # print(n_values)

        suelo_1 = getValues(1)
        suelo_2 = getValues(2)
        suelo_3 = getValues(3)

        

        categorias = ('N', 'P', 'K', 'Carb')
        y_pos = np.arange(len(categorias))

        values_1, colors_1 = valores(suelo_1)
        values_2, colors_2 = valores(suelo_2)
        values_3, colors_3 = valores(suelo_3)

        barGenerator(self.ax1,values_3,colors_3,categorias,y_pos,'Suelo 3',True)
        barGenerator(self.ax2,values_2,colors_2,categorias,y_pos,'Suelo 2',False)
        barGenerator(self.ax3, values_1, colors_1,categorias, y_pos, 'Suelo 1', False)
        
    



            




    

